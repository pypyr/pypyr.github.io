<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>filesystem on pypyr</title><link>https://pypyr.io/topics/filesystem/</link><description>Recent content in filesystem on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Oct 2022 15:31:13 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/filesystem/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.steps.fileread</title><link>https://pypyr.io/docs/steps/fileread/</link><pubDate>Sun, 12 Dec 2021 15:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileread/</guid><description>pypyr.steps.fileread permalink read file into context permalinkLoad a file into the the pypyr context.
fileread works like this:
- name: pypyr.steps.fileread comment: read file in into context in: fileRead: path: path/to/file.ext # path to file key: arb # save file contents to this context key binary: False # Optional. Default False. Set True to read file as bytes. encoding: utf-8 # Optional. Default None (platform default). If path is relative, it resolves relative to the current working directory.</description></item><item><title>pypyr.steps.filewrite</title><link>https://pypyr.io/docs/steps/filewrite/</link><pubDate>Sun, 12 Dec 2021 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewrite/</guid><description>pypyr.steps.filewrite permalink create file from any context object permalinkFormat &amp;amp; write a payload to a file.
filewrite works like this:
- name: pypyr.steps.filewrite comment: write payload out to file at path. in: fileWrite: path: /path/to/output.ext # destination path payload: file content here # payload to write to path append: False # (optional) Default False to overwrite existing binary: False # (optional) Default False for text mode. True for bytes/binary. encoding: utf-8 # Optional.</description></item><item><title>pypyr.steps.filewritetoml</title><link>https://pypyr.io/docs/steps/filewritetoml/</link><pubDate>Sat, 11 Dec 2021 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewritetoml/</guid><description>pypyr.steps.filewritetoml permalink create toml file from any context object permalinkFormat &amp;amp; write a payload to a toml file on disk. This is useful for generating toml files from your pipeline, such as when you want to create configuration files dynamically on the fly.
filewritetoml works like this:
- name: pypyr.steps.filewritetoml comment: write context payload out to toml in: fileWriteToml: path: /path/to/output.toml # destination file payload: # (optional) payload to write to path key1: value1 # output a string key2: value2 key3: 124 # output int key4: false # output bool table: mylist: - 1 - 2 myvalue: arb value This will generate the following toml to /path/to/output.</description></item><item><title>pypyr.steps.fetchtoml</title><link>https://pypyr.io/docs/steps/fetchtoml/</link><pubDate>Thu, 09 Dec 2021 19:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchtoml/</guid><description>pypyr.steps.fetchtoml permalink load &amp;amp; parse toml permalinkParse a toml fie and load it into the pypyr context.
This step requires the following key in the pypyr context:
- name: pypyr.steps.fetchtoml comment: fetch toml from path and store result in key. in: fetchToml: path: ./path.toml # required. path to file on disk. can be relative. key: destinationKey # optional. write toml to this context key. If you do not specify key, the toml structure writes directly to context root.</description></item><item><title>pypyr.parser.tomlfile</title><link>https://pypyr.io/docs/context-parsers/tomlfile/</link><pubDate>Thu, 09 Dec 2021 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/tomlfile/</guid><description>pypyr.parser.tomlfile permalink read toml file into context permalinkTake a path from the cli input argument, and read the toml file at that path into context. Strongly typed values in the source toml will translate into the pipeline context (in other words, integers will be integers, booleans will be booleans etc.). This lets you initialize the pipeline context from a toml file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.</description></item><item><title>pypyr.steps.fileformattoml</title><link>https://pypyr.io/docs/steps/fileformattoml/</link><pubDate>Sat, 11 Jul 2020 17:23:36 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformattoml/</guid><description>pypyr.steps.fileformattoml permalink find &amp;amp; replace tokens in toml file permalinkParses input toml file and creates an output toml file while substituting {tokens} in the source toml from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over any structural curly braces in the source toml.
This step does not preserve comments or whitespace. Use fileformat or filereplace if you want to preserve comments/whitespace.</description></item><item><title>pypyr.parser.yamlfile</title><link>https://pypyr.io/docs/context-parsers/yamlfile/</link><pubDate>Thu, 09 Jul 2020 17:42:16 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/yamlfile/</guid><description>pypyr.parser.yamlfile permalink read yaml file into context permalinkOpens a yaml file from the input path and use it to initialize the pypyr context dictionary. Strongly typed values in the source yaml will translate into the pipeline context with the correct type. This lets you initialize pipeline context from a yaml file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.
example permalinkGiven a yaml file like this, saved as .</description></item><item><title>pypyr.parser.jsonfile</title><link>https://pypyr.io/docs/context-parsers/jsonfile/</link><pubDate>Thu, 09 Jul 2020 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/jsonfile/</guid><description>pypyr.parser.jsonfile permalink read json file into context permalinkTakes a path from the cli input argument, and read the json file at that path into context. Strongly typed values in the source json will translate into the pipeline context. This lets you initialize pipeline context from a json file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.
example permalinkGiven a json file like this, saved as .</description></item><item><title>pypyr.steps.pathcheck</title><link>https://pypyr.io/docs/steps/pathcheck/</link><pubDate>Mon, 06 Jul 2020 13:06:55 +0100</pubDate><guid>https://pypyr.io/docs/steps/pathcheck/</guid><description>pypyr.steps.pathcheck permalink check if paths exist permalinkCheck if a path exists on the filesystem. Supports globbing. A path can point to a file or a directory.
input permalinkThe pathCheck context key must exist.
- name: pypyr.steps.pathcheck in: pathCheck: ./do/i/exist.arb # single literal path - name: pypyr.steps.pathcheck in: pathCheck: ./**/*.py # single glob expression If you want to check for the existence of multiple paths, you can pass a list instead.</description></item><item><title>pypyr.steps.glob</title><link>https://pypyr.io/docs/steps/glob/</link><pubDate>Mon, 06 Jul 2020 12:26:50 +0100</pubDate><guid>https://pypyr.io/docs/steps/glob/</guid><description>pypyr.steps.glob permalink get all matching existing paths from glob permalinkResolve a glob and get all the paths that exist on the filesystem for the input glob.
Any given path can point to a file or a directory.
The glob context key must exist in input context:
- name: pypyr.steps.glob in: glob: ./**/*.py # single glob If you want to resolve multiple globs simultaneously and combine the results, you can pass a list instead.</description></item><item><title>pypyr.steps.filewriteyaml</title><link>https://pypyr.io/docs/steps/filewriteyaml/</link><pubDate>Mon, 06 Jul 2020 12:07:43 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewriteyaml/</guid><description>pypyr.steps.filewriteyaml permalink create yaml file from any context object permalinkFormat &amp;amp; write a payload to a yaml file on disk. This is useful for generating yaml files from your pipeline such as when you want to create configuration files dynamically on the fly.
filewriteyaml works like this:
- name: pypyr.steps.filewriteyaml comment: write context payload out to yaml in: fileWriteYaml: path: /path/to/output.yaml # destination file payload: # (optional) payload to write to path key1: value1 # output yaml will have key2: value2 # key1 and key2 as string.</description></item><item><title>pypyr.steps.filewritejson</title><link>https://pypyr.io/docs/steps/filewritejson/</link><pubDate>Mon, 06 Jul 2020 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewritejson/</guid><description>pypyr.steps.filewritejson permalink create json file from any context object permalinkFormat &amp;amp; write a payload to a json file on disk. This is useful for generating json files from your pipeline such as when you want to create configuration files dynamically on the fly.
filewritejson works like this:
- name: pypyr.steps.filewritejson comment: write context payload out to json in: fileWriteJson: path: /path/to/output.json # destination file payload: # (optional) payload to write to path key1: value1 # output json will have key2: value2 # key1 and key2 as string key3: 124 # output int key4: false # output bool This will generate the following json to /path/to/output.</description></item><item><title>pypyr.steps.filereplace</title><link>https://pypyr.io/docs/steps/filereplace/</link><pubDate>Fri, 03 Jul 2020 18:00:13 +0100</pubDate><guid>https://pypyr.io/docs/steps/filereplace/</guid><description>pypyr.steps.filereplace permalink find &amp;amp; replace arbitrary strings in a file permalinkParses input text file and replaces any given search strings.
The other fileformat steps, by way of contradistinction, uses string formatting expressions inside {braces} to format values against the pypyr context.
This step, however, lets you find any arbitrary search string and replace it with any replacement string. This is especially handy if you are working with a file where curly braces aren&amp;rsquo;t helpful for a formatting expression - e.</description></item><item><title>pypyr.steps.fileformatyaml</title><link>https://pypyr.io/docs/steps/fileformatyaml/</link><pubDate>Thu, 02 Jul 2020 17:23:36 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformatyaml/</guid><description>pypyr.steps.fileformatyaml permalink find &amp;amp; replace tokens in yaml file permalinkParses input yaml file and substitutes {tokens} from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over the yaml&amp;rsquo;s structural braces.
If your yaml doesn&amp;rsquo;t use curly braces that aren&amp;rsquo;t meant for {token} substitutions, you can happily use pypyr.steps.fileformat instead - it&amp;rsquo;s more memory efficient.</description></item><item><title>pypyr.steps.fileformatjson</title><link>https://pypyr.io/docs/steps/fileformatjson/</link><pubDate>Thu, 02 Jul 2020 17:23:30 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformatjson/</guid><description>pypyr.steps.fileformatjson permalink find &amp;amp; replace tokens in json permalinkParses input json file and substitutes {tokens} from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over the json&amp;rsquo;s structural braces.
Given input json like this:
{ &amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: { &amp;#34;k2.1&amp;#34;: &amp;#34;v2.1&amp;#34;, &amp;#34;k2.2&amp;#34;: [ &amp;#34;2.2.1&amp;#34;, &amp;#34;START {replaceMeNested} END&amp;#34; ] }, &amp;#34;k3&amp;#34;: &amp;#34;{replaceMeString}&amp;#34;, &amp;#34;k4&amp;#34;: &amp;#34;{replaceMeInt}&amp;#34;, &amp;#34;k5&amp;#34;: &amp;#34;{replaceMeBool}&amp;#34;, &amp;#34;{replaceMeKey}&amp;#34;: &amp;#34;this will replace the key&amp;#34; } And a pipeline like this:</description></item><item><title>pypyr.steps.fileformat</title><link>https://pypyr.io/docs/steps/fileformat/</link><pubDate>Wed, 01 Jul 2020 20:17:37 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformat/</guid><description>pypyr.steps.fileformat permalink find &amp;amp; replace tokens in text files permalinkParses input text file, substitutes {tokens} in the text of the file from the pypyr context and writes the result to an output file.
- name: pypyr.steps.fileformat comment: read a file from disk, do some substitutions, write back to disk. in: fileFormat: in: ./in/arb.txt # required out: ./out/arb.txt # optional So if you had a text file in/arb.txt like this:</description></item><item><title>pypyr.steps.fetchyaml</title><link>https://pypyr.io/docs/steps/fetchyaml/</link><pubDate>Wed, 01 Jul 2020 20:02:35 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchyaml/</guid><description>pypyr.steps.fetchyaml permalink load &amp;amp; parse yaml permalinkLoads a yaml file into the pypyr context.
This step requires the following key in the pypyr context:
- name: pypyr.steps.fetchyaml description: fetch yaml from path in: fetchYaml: path: ./path.yaml # required. path to file on disk. can be relative. key: destinationKey # optional. write yaml to this context key. If you do not specify key, yaml writes directly to context root.
If you do not want to specify a key, you can also use the streamlined format:</description></item><item><title>pypyr.steps.fetchjson</title><link>https://pypyr.io/docs/steps/fetchjson/</link><pubDate>Wed, 01 Jul 2020 19:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchjson/</guid><description>pypyr.steps.fetchjson permalink load &amp;amp; parse json permalinkLoads a json file into the pypyr context.
This step requires the following key in the pypyr context:
- name: pypyr.steps.fetchjson comment: fetch json from path in: fetchJson: path: ./path.json # required. path to file on disk. can be relative. key: destinationKey # optional. write json to this context key. If you do not specify key, json writes directly to context root.
If you do not want to specify a key, you can also use the streamlined format:</description></item></channel></rss>