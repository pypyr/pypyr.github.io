<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>loops on pypyr</title><link>https://pypyr.io/topics/loops/</link><description>Recent content in loops on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Aug 2020 11:58:52 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/loops/index.xml" rel="self" type="application/rss+xml"/><item><title>while loop decorator</title><link>https://pypyr.io/docs/decorators/while/</link><pubDate>Tue, 14 Jul 2020 13:09:24 +0100</pubDate><guid>https://pypyr.io/docs/decorators/while/</guid><description>while permalink repeat step(s) in while loop permalinkRepeat step until stop is True, or until you reach a configurable maximum iterations. You have to specify at least one of either max or stop.
If you specify both max and stop, the loop exits when stop is True as long as it&amp;rsquo;s still under max iterations.
max will exit the loop even if stop is still False. If you want to error and stop processing when max exhausts set errorOnMax to True.</description></item><item><title>retry decorator</title><link>https://pypyr.io/docs/decorators/retry/</link><pubDate>Mon, 13 Jul 2020 13:37:06 +0100</pubDate><guid>https://pypyr.io/docs/decorators/retry/</guid><description>retry permalink automatic retries permalinkRetries the step until it succeeds. If you do not set retry, pypyr will not retry the step automatically. When you do set retry, pypyr will retry whatever step it is without you having to do anything else.
The retry iteration counter is context['retryCounter']. You can use this as usual for any context value in a formatting string expression as {retryCounter}.
These are all the available configuration parameters for retry:</description></item><item><title>foreach loop decorator</title><link>https://pypyr.io/docs/decorators/foreach/</link><pubDate>Fri, 10 Jul 2020 19:07:51 +0100</pubDate><guid>https://pypyr.io/docs/decorators/foreach/</guid><description>foreach permalink repeat step for each item in list permalinkRun the step once for each item in the list.
The iterator is context['i']. If you want to use the iterator value in your step with a substitution expression, you&amp;rsquo;d use {i}.
foreach is a list []. In your pipeline, you can specify this in two ways:
foreach:[item 1, item 2, item 3]or
foreach:- item 1- item 2- item 3 loop static input list permalinkThe foreach input is a list.</description></item></channel></rss>