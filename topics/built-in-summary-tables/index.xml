<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>built-in summary tables on pypyr</title><link>https://pypyr.io/topics/built-in-summary-tables/</link><description>Recent content in built-in summary tables on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Aug 2020 20:46:07 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/built-in-summary-tables/index.xml" rel="self" type="application/rss+xml"/><item><title>built-in pipelines</title><link>https://pypyr.io/docs/pipelines/builtin-pipelines/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/builtin-pipelines/</guid><description>Built-in pipelines permalinkpypyr comes with with some basic pipelines out of the box. These don&amp;rsquo;t do much, nor can they: the whole idea is for you to write your own awesome pipelines because it so so easy!
pipeline description how to run donothing Does what it says. Nothing. pypyr donothing echo Echos context value echoMe to output. pypyr echo text goes here pypyrversion Prints the python cli version number.</description></item><item><title>context parsers</title><link>https://pypyr.io/docs/context-parsers/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/context-parsers/</guid><description>context parsers permalinkpypyr has a whole bunch of ready-made built-in context parsers to make your life easier. A context parser allows you to customize how you want to pass cli arguments to your pipeline.
Making your own custom context-parser is super easy too.
# everything after mypipeline goes to the context_parser $ pypyr mypipeline these are all context input arguments $ pypyr mypipeline key1=value2 key2=&amp;#34;value 2&amp;#34; A context_parser parses the pypyr command&amp;rsquo;s context input arguments.</description></item><item><title>step decorators</title><link>https://pypyr.io/docs/decorators/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/decorators/</guid><description>step decorators permalink conditional execution, looping &amp;amp; error handling for any step permalinkComplex steps have various optional step decorators that change how or if a step is run. You decorate your step&amp;rsquo;s core function with these extra behavioral attributes.
You can set any decorator on any step in your pipeline in any combination.
Don&amp;rsquo;t bother specifying these unless you want to deviate from the default values. If you don&amp;rsquo;t need any decorators for your step, you might as well save yourself some typing and use the step in simple mode instead by just specifying the bare step name.</description></item><item><title>plugins overview</title><link>https://pypyr.io/docs/plugins/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/</guid><description>plugins permalinkpypyr core stays deliberately light so the dependencies are down to the minimum. I loathe installs where there&amp;rsquo;re a raft of extra deps that I don&amp;rsquo;t use clogging up the system.
When and if you need other libraries, you can selectively choose to add this functionality by installing a pypyr plugin.
boss pypyr plug-in description pypyr-aws Interact with the AWS sdk api.</description></item><item><title>steps overview</title><link>https://pypyr.io/docs/steps/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/steps/</guid><description>built-in steps permalinkpypyr has a whole bunch of ready-made built-in steps to make your life easier. Making your own custom step is super easy too.</description></item><item><title>substitutions</title><link>https://pypyr.io/docs/substitutions/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/substitutions/</guid><description>substitution format expressions permalinkSubstitutions, or interpolation, allow you to use formatting expressions to manipulate values dynamically at run-time. Use this for type-safe assignment, string concatenation, simple string formatting replacement &amp;amp; python expressions for more complex logic like min, max, abs or constructing more complex conditional boolean evaluation expressions.
You can use any of the following anywhere that supports substitutions.</description></item></channel></rss>