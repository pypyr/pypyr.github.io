<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>json on pypyr</title><link>https://pypyr.io/topics/json/</link><description>Recent content in json on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Aug 2020 21:24:28 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/json/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.parser.jsonfile</title><link>https://pypyr.io/docs/context-parsers/jsonfile/</link><pubDate>Thu, 09 Jul 2020 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/jsonfile/</guid><description>pypyr.parser.jsonfile permalink read json file into context permalinkTakes a path from the cli input argument, and read the json file at that path into context. Strongly typed values in the source json will translate into the pipeline context. This lets you initialize pipeline context from a json file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.
example permalinkGiven a json file like this, saved as .</description></item><item><title>pypyr.parser.json</title><link>https://pypyr.io/docs/context-parsers/json/</link><pubDate>Wed, 08 Jul 2020 19:18:15 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/json/</guid><description>pypyr.parser.json permalink parse json input string from cli permalinkTakes a json string from the cli argument input, parses it into a type-safe json object, and puts the object into the pypyr context.
pypyr honors the input json data types. In other words, bools are bools, numbers are numbers, nulls are nulls.
example permalinkGiven a pipeline like this, arbitrarily saved as ./json-parser.yaml:
# ./json-parser.yamlcontext_parser:pypyr.parser.jsonsteps:# echoMe will be set in the input json str- pypyr.</description></item><item><title>pypyr.steps.filewritejson</title><link>https://pypyr.io/docs/steps/filewritejson/</link><pubDate>Mon, 06 Jul 2020 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewritejson/</guid><description>pypyr.steps.filewritejson permalink create json file from any context object permalinkFormat &amp;amp; write a payload to a json file on disk. This is useful for generating json files from your pipeline such as when you want to create configuration files dynamically on the fly.
filewritejson works like this:
- name:pypyr.steps.filewritejsoncomment:writecontextpayloadouttojsonin:fileWriteJson:path:/path/to/output.json# destination filepayload:# (optional) payload to write to pathkey1:value1# output json will havekey2:value2# key1 and key2 as stringkey3:124# output intkey4:false# output boolThis will generate the following json to /path/to/output.</description></item><item><title>pypyr.steps.fileformatjson</title><link>https://pypyr.io/docs/steps/fileformatjson/</link><pubDate>Thu, 02 Jul 2020 17:23:30 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformatjson/</guid><description>pypyr.steps.fileformatjson permalink find &amp;amp; replace tokens in json permalinkParses input json file and substitutes {tokens} from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over the json&amp;rsquo;s structural braces.
Given input json like this:
{ &amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: { &amp;#34;k2.1&amp;#34;: &amp;#34;v2.1&amp;#34;, &amp;#34;k2.2&amp;#34;: [ &amp;#34;2.2.1&amp;#34;, &amp;#34;START {replaceMeNested} END&amp;#34; ] }, &amp;#34;k3&amp;#34;: &amp;#34;{replaceMeString}&amp;#34;, &amp;#34;k4&amp;#34;: &amp;#34;{replaceMeInt}&amp;#34;, &amp;#34;k5&amp;#34;: &amp;#34;{replaceMeBool}&amp;#34;, &amp;#34;{replaceMeKey}&amp;#34;: &amp;#34;this will replace the key&amp;#34; } And a pipeline like this:</description></item><item><title>pypyr.steps.fetchjson</title><link>https://pypyr.io/docs/steps/fetchjson/</link><pubDate>Wed, 01 Jul 2020 19:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchjson/</guid><description>pypyr.steps.fetchjson permalink load &amp;amp; parse json permalinkLoads a json file into the pypyr context.
This step requires the following key in the pypyr context:
- name:pypyr.steps.fetchjsoncomment:fetchjsonfrompathin:fetchJson:path:./path.json# required. path to file on disk. can be relative.key:destinationKey# optional. write json to this context key.If you do not specify key, json writes directly to context root.
If you do not want to specify a key, you can also use the streamlined format:</description></item></channel></rss>