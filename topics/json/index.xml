<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>json on pypyr</title><link>https://pypyr.io/topics/json/</link><description>Recent content in json on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Aug 2020 21:24:28 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/json/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.steps.jsonparse</title><link>https://pypyr.io/docs/steps/jsonparse/</link><pubDate>Mon, 26 Oct 2020 13:12:12 +0000</pubDate><guid>https://pypyr.io/docs/steps/jsonparse/</guid><description>pypyr.steps.jsonparse permalink parse json string into context object permalinkParse an input json string into the pypyr context as an object. This allows you to work with the deserialized objects from the json string like you would normally work with any data structures in the pypyr context - so you can use all the usual context handling functionality to set, edit &amp;amp; manipulate context keys and values.
This step requires the jsonParse key in the pypyr context:</description></item><item><title>pypyraws.steps.s3fetchjson</title><link>https://pypyr.io/docs/plugins/aws/steps/s3fetchjson/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/s3fetchjson/</guid><description>pypyraws.steps.s3fetchjson permalinkFetch a json file from s3 and put the json values into context.
input permalinkRequired input context is:
s3Fetch:clientArgs:# optionalarg1Name:arg1ValuemethodArgs:# mandatoryBucket:&amp;#39;{bucket}&amp;#39;Key:arb.jsonkey:&amp;#39;destination pypyr context key&amp;#39;# optional clientArgs go to the aws s3 client constructor. These are optional. methodArgs go to the the s3 get_object call. The minimum required values are: Bucket Key key writes fetched json to this context key. If not specified, json writes directly to context root.</description></item><item><title>pypyr.parser.jsonfile</title><link>https://pypyr.io/docs/context-parsers/jsonfile/</link><pubDate>Thu, 09 Jul 2020 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/jsonfile/</guid><description>pypyr.parser.jsonfile permalink read json file into context permalinkTakes a path from the cli input argument, and read the json file at that path into context. Strongly typed values in the source json will translate into the pipeline context. This lets you initialize pipeline context from a json file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.
example permalinkGiven a json file like this, saved as .</description></item><item><title>pypyr.parser.json</title><link>https://pypyr.io/docs/context-parsers/json/</link><pubDate>Wed, 08 Jul 2020 19:18:15 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/json/</guid><description>pypyr.parser.json permalink parse json input string from cli permalinkTakes a json string from the cli argument input, parses it into a type-safe json object, and puts the object into the pypyr context.
pypyr honors the input json data types. In other words, bools are bools, numbers are numbers, nulls are nulls.
example permalinkGiven a pipeline like this, arbitrarily saved as ./json-parser.yaml:
# ./json-parser.yamlcontext_parser:pypyr.parser.jsonsteps:# echoMe will be set in the input json str- pypyr.</description></item><item><title>pypyr.steps.filewritejson</title><link>https://pypyr.io/docs/steps/filewritejson/</link><pubDate>Mon, 06 Jul 2020 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewritejson/</guid><description>pypyr.steps.filewritejson permalink create json file from any context object permalinkFormat &amp;amp; write a payload to a json file on disk. This is useful for generating json files from your pipeline such as when you want to create configuration files dynamically on the fly.
filewritejson works like this:
- name:pypyr.steps.filewritejsoncomment:write context payload out to jsonin:fileWriteJson:path:/path/to/output.json# destination filepayload:# (optional) payload to write to pathkey1:value1# output json will havekey2:value2# key1 and key2 as stringkey3:124# output intkey4:false# output boolThis will generate the following json to /path/to/output.</description></item><item><title>pypyr.steps.fileformatjson</title><link>https://pypyr.io/docs/steps/fileformatjson/</link><pubDate>Thu, 02 Jul 2020 17:23:30 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformatjson/</guid><description>pypyr.steps.fileformatjson permalink find &amp;amp; replace tokens in json permalinkParses input json file and substitutes {tokens} from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over the json&amp;rsquo;s structural braces.
Given input json like this:
{ &amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: { &amp;#34;k2.1&amp;#34;: &amp;#34;v2.1&amp;#34;, &amp;#34;k2.2&amp;#34;: [ &amp;#34;2.2.1&amp;#34;, &amp;#34;START {replaceMeNested} END&amp;#34; ] }, &amp;#34;k3&amp;#34;: &amp;#34;{replaceMeString}&amp;#34;, &amp;#34;k4&amp;#34;: &amp;#34;{replaceMeInt}&amp;#34;, &amp;#34;k5&amp;#34;: &amp;#34;{replaceMeBool}&amp;#34;, &amp;#34;{replaceMeKey}&amp;#34;: &amp;#34;this will replace the key&amp;#34; } And a pipeline like this:</description></item><item><title>pypyr.steps.fetchjson</title><link>https://pypyr.io/docs/steps/fetchjson/</link><pubDate>Wed, 01 Jul 2020 19:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchjson/</guid><description>pypyr.steps.fetchjson permalink load &amp;amp; parse json permalinkLoads a json file into the pypyr context.
This step requires the following key in the pypyr context:
- name:pypyr.steps.fetchjsoncomment:fetch json from pathin:fetchJson:path:./path.json# required. path to file on disk. can be relative.key:destinationKey# optional. write json to this context key.If you do not specify key, json writes directly to context root.
If you do not want to specify a key, you can also use the streamlined format:</description></item><item><title>jsonify</title><link>https://pypyr.io/docs/substitutions/jsonify/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/substitutions/jsonify/</guid><description>jsonify permalink convert object to json string permalinkUse jsonify to serialize a pypyr context object to a json string.
- name:pypyr.steps.setin:set:myJsonDict:!jsonifyk1:v1k2:123k3:Falsek4:- 1- 2- a:bc:dmyJsonList:!jsonify- zero- one- twomyJsonNull:!jsonify nullmyJsonNumber:!jsonify 99myJsonQuotedString:!jsonify &amp;#34;0123&amp;#34;myJsonBareString:!jsonify arbitrary string- name:pypyr.steps.echoin:echoMe:|myJsonDict: {myJsonDict} myJsonList: {myJsonList} myJsonNull: {myJsonNull} myJsonNumber: {myJsonNumber} myJsonQuotedString: {myJsonQuotedString} myJsonBareString: {myJsonBareString}This gives output:
myJsonDict: {&amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: 123, &amp;#34;k3&amp;#34;: false, &amp;#34;k4&amp;#34;: [1, 2, {&amp;#34;a&amp;#34;: &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;: &amp;#34;d&amp;#34;}]} myJsonList: [&amp;#34;zero&amp;#34;, &amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;] myJsonNull: null myJsonNumber: 99 myJsonQuotedString: &amp;#34;0123&amp;#34; myJsonBareString: &amp;#34;arbitrary string&amp;#34; You could think of this as converting yaml to json, however, in actuality under the hood pypyr will serialize any given object in context to json with jsonify so it&amp;rsquo;s not necessarily just yaml as the input.</description></item></channel></rss>