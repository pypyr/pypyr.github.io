<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>execute external program on pypyr</title><link>https://pypyr.io/topics/execute-external-program/</link><description>Recent content in execute external program on pypyr</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 05 Oct 2022 18:24:53 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/execute-external-program/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.steps.venv</title><link>https://pypyr.io/docs/steps/venv/</link><pubDate>Tue, 04 Oct 2022 15:27:43 +0100</pubDate><guid>https://pypyr.io/docs/steps/venv/</guid><description>pypyr.steps.venv permalinkCreate Python stdlib virtual environments (venv) from config without writing any script yourself. This is the equivalent of running $ python -m venv my-dir.
This step lets you create venvs from within your automation pipeline.
If you just want to create a bunch of venvs but you don&amp;rsquo;t want to write your own pipeline to do so, check out the built-in venv-create pipeline.
This steps creates multiple venvs in parallel concurrently, making for faster processing on what is usually a pretty slow process.</description></item><item><title>pypyr.steps.shells</title><link>https://pypyr.io/docs/steps/shells/</link><pubDate>Mon, 23 May 2022 08:35:53 +0100</pubDate><guid>https://pypyr.io/docs/steps/shells/</guid><description>pypyr.steps.shells permalink run shell statements concurrently permalinkRuns shell statements in parallel in the default shell. The default shell is usually /bin/sh on POSIX, and on Windows it&amp;rsquo;s cmd.exe.
Where the cmds step runs programs or executables, shells passes the commands through to the system shell. This means all your usual shell expressions are available, such as ~ expansions and your favorite bashisms.
If you just want to run parallel programs, scripts or executables with arguments, you do NOT need to use shells, you can use pypyr.</description></item><item><title>pypyr.steps.cmds</title><link>https://pypyr.io/docs/steps/cmds/</link><pubDate>Mon, 23 May 2022 08:35:40 +0100</pubDate><guid>https://pypyr.io/docs/steps/cmds/</guid><description>pypyr.steps.cmds permalink run programs concurrently permalinkRun programs, external scripts, applications or commands in parallel. This step launches executables as asynchronous subprocesses that run concurrently in parallel.
Step input can take two forms: simple syntax or expanded syntax. Simple syntax is just a list of strings. This will run the commands in parallel with the default options.
posix # simple syntax - name: pypyr.steps.cmds comment: copy 3 files concurrently in: cmds: - cp file1.</description></item><item><title>pypyr.steps.python</title><link>https://pypyr.io/docs/steps/python/</link><pubDate>Sat, 19 Feb 2022 16:04:49 +0000</pubDate><guid>https://pypyr.io/docs/steps/python/</guid><description>pypyr.steps.python permalinkGet the full path of the executable binary of the Python interpreter running the current pypyr session.
The step writes the absolute path as a string to the python key in context.
This means that wherever you would&amp;rsquo;ve invoked python or python3 as a subprocess, you can instead use {python}. This will replace the {python} token with the absolute path of the Python executable that is currently running pypyr.</description></item><item><title>pypyr.steps.shell</title><link>https://pypyr.io/docs/steps/shell/</link><pubDate>Tue, 07 Jul 2020 11:53:28 +0100</pubDate><guid>https://pypyr.io/docs/steps/shell/</guid><description>pypyr.steps.shell permalink run shell statements permalinkRuns the context value cmd in the default shell. On a sensible O/S, this is /bin/sh.
Where the cmd step runs a program or executable, shell passes the command through to the system shell. This means all your usual shell expressions are available, such as ~ expansions and your favorite bashisms.
If you are just looking to run a command or executable with arguments, you do not need to use shell, you can use pypyr.</description></item><item><title>pypyr.steps.cmd</title><link>https://pypyr.io/docs/steps/cmd/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/steps/cmd/</guid><description>pypyr.steps.cmd permalink execute external commands, applications &amp;amp; scripts permalinkRun a program, run an external script, application or command. Execute an executable as a sub-process.
cmd runs an executable, it does not invoke the shell. You cannot use shell features like exit, return, shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user&amp;rsquo;s home directory. Use pypyr.steps.shell for that instead.
This step runs executables serially one after the other.</description></item></channel></rss>