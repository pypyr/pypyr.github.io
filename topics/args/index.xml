<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>args on pypyr</title><link>https://pypyr.io/topics/args/</link><description>Recent content in args on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Oct 2022 15:31:13 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/args/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.parser.argskwargs</title><link>https://pypyr.io/docs/context-parsers/argskwargs/</link><pubDate>Thu, 20 Oct 2022 10:26:36 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/argskwargs/</guid><description>pypyr.parser.argskwargs permalink parse list of args &amp;amp; key=value pairs from cli permalinkPuts input cli arguments into a list argList. If an argument has a =, will save the key=value pair as a dictionary/mapping element.
term $ pypyr my-pipeline arg1 arg2 k1=value1 k2=value2 $ pypyr my-pipeline arg1 &amp;#34;arg 2&amp;#34; k1=&amp;#34;value1&amp;#34; k2=&amp;#34;value 2&amp;#34; The second example will result in your pipeline context looking like this:
{ &amp;#39;argList&amp;#39;: [&amp;#39;arg1&amp;#39;, &amp;#39;arg 2&amp;#39;], &amp;#39;k1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;k2&amp;#39;: &amp;#39;value 2&amp;#39; } This gives you cli input syntax very similar to makefile.</description></item><item><title>pypyr.parser.tomlfile</title><link>https://pypyr.io/docs/context-parsers/tomlfile/</link><pubDate>Thu, 09 Dec 2021 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/tomlfile/</guid><description>pypyr.parser.tomlfile permalink read toml file into context permalinkTake a path from the cli input argument, and read the toml file at that path into context. Strongly typed values in the source toml will translate into the pipeline context (in other words, integers will be integers, booleans will be booleans etc.). This lets you initialize the pipeline context from a toml file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.</description></item><item><title>custom args</title><link>https://pypyr.io/docs/cli/custom-args/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/cli/custom-args/</guid><description>pass custom optional arguments from the cli permalinkYou can pass your own arguments to your pipelines from the cli without writing any code. You can decide per pipeline what style of arguments work better for that specific pipeline, for example key-value pairs, or a single string, or boolean switches.
See context parsers for more information on how to pass your own arguments to a pipeline and how to use those runtime values in the pipeline.</description></item><item><title>pypyr.parser.yamlfile</title><link>https://pypyr.io/docs/context-parsers/yamlfile/</link><pubDate>Thu, 09 Jul 2020 17:42:16 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/yamlfile/</guid><description>pypyr.parser.yamlfile permalink read yaml file into context permalinkOpens a yaml file from the input path and use it to initialize the pypyr context dictionary. Strongly typed values in the source yaml will translate into the pipeline context with the correct type. This lets you initialize pipeline context from a yaml file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.
example permalinkGiven a yaml file like this, saved as .</description></item><item><title>pypyr.parser.string</title><link>https://pypyr.io/docs/context-parsers/string/</link><pubDate>Thu, 09 Jul 2020 16:52:56 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/string/</guid><description>pypyr.parser.string permalink put all cli input args into a single string permalinkTakes any arbitrary input from the cli input args and concatenate into a single string argString to initialize context.
If you have multiple sequential literal spaces right next to each other, escape these with single or double quotes.
Given a pipeline like this, arbitrarily saved as ./string-parser.yaml:
# ./string-parser.yaml context_parser: pypyr.parser.string steps: - pypyr.steps.debug # prints at log level &amp;lt;=20 - name: pypyr.</description></item><item><title>pypyr.parser.list</title><link>https://pypyr.io/docs/context-parsers/list/</link><pubDate>Thu, 09 Jul 2020 16:34:56 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/list/</guid><description>pypyr.parser.list permalink parse cli input args into list permalinkAppend each input argument into a list argList to initialize context.
Escape literal spaces with single or double quotes.
Given a pipeline like this, arbitrarily saved as ./list-parser.yaml:
# ./list-parser.yaml context_parser: pypyr.parser.list steps: - pypyr.steps.debug # prints at log level &amp;lt;=20 - name: pypyr.steps.echo comment: the args passed into the pypyr with list parser end up as a list in context under key argList in: echoMe: &amp;#34;the 2nd thing on the input list is: {argList[1]}&amp;#34; Each argument you pass via the cli will now be in the argList list:</description></item><item><title>pypyr.parser.keyvaluepairs</title><link>https://pypyr.io/docs/context-parsers/keyvaluepairs/</link><pubDate>Thu, 09 Jul 2020 12:26:36 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/keyvaluepairs/</guid><description>pypyr.parser.keyvaluepairs permalink pass key-value pairs from cli to pipeline permalinkTakes key=value pairs from cli arg input and initialize context with a dictionary where each pair becomes a dictionary element.
term $ pypyr my-pipeline key1=value1 key2=2 key3=&amp;#34;value 3&amp;#34; _ This will parse to context like this:
{ &amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;2&amp;#39;, &amp;#39;key3&amp;#39;: &amp;#39;value 3&amp;#39; } Escape literal spaces with single or double quotes.
Any arg without an = will parse to key: ''.</description></item><item><title>pypyr.parser.keys</title><link>https://pypyr.io/docs/context-parsers/keys/</link><pubDate>Thu, 09 Jul 2020 12:06:01 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/keys/</guid><description> pypyr.parser.keys permalink custom boolean switches from the cli permalinkFor each input argument, initialize context with a dictionary where each argument becomes the key, with value set to True.
Escape literal spaces with single or double quotes.
Given a pipeline like this, arbitrarily saved as ./keys-parser.yaml:
# ./keys-parser.yaml context_parser: pypyr.parser.keys steps: - pypyr.steps.debug # prints at log level &amp;lt;=20 Running the pipeline with different inputs:
$ pypyr keys-parser --log 20 {} $ pypyr keys-parser a b c --log 20 {&amp;#39;a&amp;#39;: True, &amp;#39;b&amp;#39;: True, &amp;#39;c&amp;#39;: True} $ pypyr keys-parser &amp;#34;a with space&amp;#34; &amp;#39; b&amp;#39; c --log 20 {&amp;#39; b&amp;#39;: True, &amp;#39;a with space&amp;#39;: True, &amp;#39;c&amp;#39;: True}</description></item><item><title>pypyr.parser.jsonfile</title><link>https://pypyr.io/docs/context-parsers/jsonfile/</link><pubDate>Thu, 09 Jul 2020 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/jsonfile/</guid><description>pypyr.parser.jsonfile permalink read json file into context permalinkTakes a path from the cli input argument, and read the json file at that path into context. Strongly typed values in the source json will translate into the pipeline context. This lets you initialize pipeline context from a json file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.
example permalinkGiven a json file like this, saved as .</description></item><item><title>pypyr.parser.json</title><link>https://pypyr.io/docs/context-parsers/json/</link><pubDate>Wed, 08 Jul 2020 19:18:15 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/json/</guid><description>pypyr.parser.json permalink parse json input string from cli permalinkTakes a json string from the cli argument input, parses it into a type-safe json object, and puts the object into the pypyr context.
pypyr honors the input json data types. In other words, bools are bools, numbers are numbers, nulls are nulls.
example permalinkGiven a pipeline like this, arbitrarily saved as ./json-parser.yaml:
# ./json-parser.yaml context_parser: pypyr.parser.json steps: # echoMe will be set in the input json str - pypyr.</description></item><item><title>pypyr.parser.dict</title><link>https://pypyr.io/docs/context-parsers/dict/</link><pubDate>Wed, 08 Jul 2020 18:44:23 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/dict/</guid><description>pypyr.parser.dict permalink create a dict from key=value pair string permalinkTakes a key=value pair string and returns a dictionary (aka a map) where each pair becomes a dictionary element inside a dict with name argDict.
Escape literal spaces with single or double quotes.
Any arg without an = will parse to key: ''. term $ pypyr my-pipeline arg0 key1=value1 key2=2 key3=&amp;#34;value 3&amp;#34; _ This will parse to context like this:</description></item></channel></rss>