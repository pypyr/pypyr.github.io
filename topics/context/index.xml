<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>context on pypyr</title><link>https://pypyr.io/topics/context/</link><description>Recent content in context on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Aug 2020 20:51:45 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/context/index.xml" rel="self" type="application/rss+xml"/><item><title>variables</title><link>https://pypyr.io/docs/getting-started/variables/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/variables/</guid><description>how to use variables in a pypyr pipeline permalinkYou can use variables to parameterize your pypyr pipelines and pass values between steps. pypyr lets you pass values seamlessly between the pipeline yaml, the cli (or api) and the steps in the pipeline.
pypyr stores variables in the context. The context is a dictionary that stays in scope for the duration of the entire pipeline.
Variables can be simple types like string or int, and they can also contain complex nested structures like dictionaries or lists.</description></item><item><title>pypyr.steps.configvars</title><link>https://pypyr.io/docs/steps/configvars/</link><pubDate>Sun, 13 Feb 2022 13:54:20 +0000</pubDate><guid>https://pypyr.io/docs/steps/configvars/</guid><description>pypyr.steps.configvars permalinkUse the configvars step to inject variables that you set in pyproject.toml or in the pypyr yaml config files into your pipeline. This allows you to get populate your pipeline variables dynamically from project configuration specific to your repo, or to use user or global settings in your pipeline.
configvars is a simple step that doesn&amp;rsquo;t take any inputs - it just looks for vars in the pypyr config files.</description></item><item><title>pypyr.steps.add</title><link>https://pypyr.io/docs/steps/add/</link><pubDate>Tue, 05 Oct 2021 16:53:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/add/</guid><description>pypyr.steps.add permalink add item to a set permalinkAdd item(s) to a set.
The difference between a set and a list is that a list allows duplicate elements, whereas every item in a set is unique. If you&amp;rsquo;re looking to work with a list, use append instead. Sets are unordered, lists are ordered.
- name:pypyr.steps.addcomment:add item to a setin:add:set:my_set# required. Name of set.addMe:item# required. Add this to the set.unpack:False# optional. defaults False.</description></item><item><title>pypyr.steps.append</title><link>https://pypyr.io/docs/steps/append/</link><pubDate>Tue, 05 Oct 2021 14:42:26 +0100</pubDate><guid>https://pypyr.io/docs/steps/append/</guid><description>pypyr.steps.append permalink append item to a list permalinkAppend item(s) to the end of a list.
The full input for the append step looks like this:
- name:pypyr.steps.appendcomment:append item to listin:append:list:my_list# required. Name of list.addMe:list item# required. Append this to the listunpack:False# optional. Defaults False. If True, enumerate addMe &amp;amp; append each item individually.Use the list argument to specify the name of the list. If the list does not exist, pypyr will create a list of that name for you and initialize it with the value of addMe.</description></item><item><title>pypyr.steps.set</title><link>https://pypyr.io/docs/steps/set/</link><pubDate>Mon, 05 Oct 2020 13:28:46 +0100</pubDate><guid>https://pypyr.io/docs/steps/set/</guid><description>pypyr.steps.set permalink set context values with formatting &amp;amp; dynamic expressions permalinkSet context keys with arbitrary values of different types. You can also use formatting expressions for assigning dynamic run-time values with substitutions.
This is roughly the equivalent of instantiating and assigning a variable in traditional programming.
Requires the set key in context. set is a dictionary of items to set in context. For example, here is how you can set arbitrary values with different types to arbitrary keys:</description></item><item><title>pypyr.steps.contextcopy</title><link>https://pypyr.io/docs/steps/contextcopy/</link><pubDate>Sat, 15 Aug 2020 20:28:42 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextcopy/</guid><description>pypyr.steps.contextcopy permalink copy values &amp;amp; structures from one part of context to another permalinkCopies context values from already existing context values.
This is handy if you need to prepare certain keys in context where a next step might need a specific key. If you already have the value in context, you can create a new key (or update existing key) with that value.
contextcopy and set overwrite existing keys. If you want to merge new values into an existing destination hierarchy, use contextmerge instead.</description></item><item><title>custom context parser</title><link>https://pypyr.io/docs/api/context-parser/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/context-parser/</guid><description>create a custom context parser permalink parse custom cli arguments permalinkA context_parser parses the pypyr cli input arguments. Simply put, this is all the positional arguments after the pipeline-name in the cli.
$ pypyr pipelinename this is the args input In this example, ['this', 'is', 'the', 'args', 'input'] will go to the pipeline&amp;rsquo;s context parser as input.
Generally, a context_parser is likely to take the input args list and create a dict with it somehow.</description></item><item><title>context parsers</title><link>https://pypyr.io/docs/context-parsers/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/context-parsers/</guid><description>context parsers permalinkA context parser allows you to customize how you want to pass cli arguments to your pipeline. pypyr has a whole bunch of ready-made built-in context parsers to make your life easier.
Making your own custom context-parser is super easy too.
# everything after mypipeline goes to the context_parser $ pypyr mypipeline these are all context input arguments $ pypyr mypipeline key1=value2 key2=&amp;#34;value 2&amp;#34; A context_parser parses the pypyr command&amp;rsquo;s context input arguments.</description></item><item><title>in decorator</title><link>https://pypyr.io/docs/decorators/in/</link><pubDate>Sat, 11 Jul 2020 12:56:32 +0100</pubDate><guid>https://pypyr.io/docs/decorators/in/</guid><description>in permalink add input arguments to step context permalinkin sets the input arguments for a step. pypyr adds anything in in to the context so that the decorated step can use these key-value pairs.
in is a mapping, also known as a dict {}. You can use complex, nested structures. pypyr will honor the data types of the yaml values you set in your pipeline.
# arbitrarily complex nested input args, # with different data types, # just to make a point.</description></item><item><title>pypyr.steps.default</title><link>https://pypyr.io/docs/steps/default/</link><pubDate>Wed, 01 Jul 2020 12:22:55 +0100</pubDate><guid>https://pypyr.io/docs/steps/default/</guid><description>pypyr.steps.default permalink initialize the context with default values permalinkSets values in context if they do not exist already. Does not overwrite existing values. Supports nested hierarchies.
This is especially useful for setting default values in context, for example when using optional arguments from the cli.
This step sets the contents of the context key defaults into context where keys in defaults do not exist in context already. The contents of the defaults key must be a dictionary.</description></item><item><title>pypyr.steps.contextsetf</title><link>https://pypyr.io/docs/steps/contextsetf/</link><pubDate>Tue, 30 Jun 2020 20:28:46 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextsetf/</guid><description>pypyr.steps.contextsetf permalinkUse pypyr.steps.set instead - it does the same thing but the name is shorter so less typing, woo! Your keyboard will thank you in the long run.
Although contextsetf is not going anywhere, new updates &amp;amp; fixes will only go to set.</description></item><item><title>pypyr.steps.contextmerge</title><link>https://pypyr.io/docs/steps/contextmerge/</link><pubDate>Tue, 30 Jun 2020 19:51:26 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextmerge/</guid><description>pypyr.steps.contextmerge permalink merging context values permalinkMerges values into context, preserving the existing hierarchy while only updating the differing values as specified in the contextMerge input.
By comparison, contextcopy and set overwrite the destination hierarchy that is in context already.
This step merges the contents of the context key contextMerge into context. The contents of the contextMerge key must be a dictionary.
examples permalinkFor example, say input context is:
key1:value1key2:value2key3:k31:value31k32:value32contextMerge:key2:&amp;#39;aaa_{key1}_zzz&amp;#39;key3:k33:value33_{key1}key4:&amp;#39;bbb_{key2}_yyy&amp;#39;This will result in return context:</description></item><item><title>pypyr.steps.contextclearall</title><link>https://pypyr.io/docs/steps/contextclearall/</link><pubDate>Tue, 30 Jun 2020 19:04:00 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextclearall/</guid><description>pypyr.steps.contextclearall permalinkWipe the entire context. No input context arguments required.
You can always use contextclearall as a simple step, since it does not require any input context.
Sample pipeline yaml:
steps:- my.arb.step- pypyr.steps.contextclearall- another.arb.stepcontextclearall also wipes all the imports from any preceding pyimport steps.</description></item><item><title>pypyr.steps.contextclear</title><link>https://pypyr.io/docs/steps/contextclear/</link><pubDate>Tue, 30 Jun 2020 19:03:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextclear/</guid><description>pypyr.steps.contextclear permalinkRemove the specified items from the context.
Will iterate contextClear and remove those keys from context.
steps:- name:pypyr.steps.contextcleardescription:delete these 2 context keysin:contextClear:- removeMe- removeMeTooFor example, say input context is:
key1:value1key2:value2key3:value3key4:value4contextClear:- key2- key4- contextClearThis will result in return context:
key1:value1key3:value3Notice how contextClear also cleared itself in this example.</description></item></channel></rss>