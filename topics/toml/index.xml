<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>toml on pypyr</title><link>https://pypyr.io/topics/toml/</link><description>Recent content in toml on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Dec 2021 21:24:28 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/toml/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.steps.filewritetoml</title><link>https://pypyr.io/docs/steps/filewritetoml/</link><pubDate>Sat, 11 Dec 2021 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewritetoml/</guid><description>pypyr.steps.filewritetoml permalink create toml file from any context object permalinkFormat &amp;amp; write a payload to a toml file on disk. This is useful for generating toml files from your pipeline, such as when you want to create configuration files dynamically on the fly.
filewritetoml works like this:
- name: pypyr.steps.filewritetoml comment: write context payload out to toml in: fileWriteToml: path: /path/to/output.toml # destination file payload: # (optional) payload to write to path key1: value1 # output a string key2: value2 key3: 124 # output int key4: false # output bool table: mylist: - 1 - 2 myvalue: arb value This will generate the following toml to /path/to/output.</description></item><item><title>pypyr.steps.fetchtoml</title><link>https://pypyr.io/docs/steps/fetchtoml/</link><pubDate>Thu, 09 Dec 2021 19:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchtoml/</guid><description>pypyr.steps.fetchtoml permalink load &amp;amp; parse toml permalinkParse a toml fie and load it into the pypyr context.
This step requires the following key in the pypyr context:
- name: pypyr.steps.fetchtoml comment: fetch toml from path and store result in key. in: fetchToml: path: ./path.toml # required. path to file on disk. can be relative. key: destinationKey # optional. write toml to this context key. If you do not specify key, the toml structure writes directly to context root.</description></item><item><title>pypyr.parser.tomlfile</title><link>https://pypyr.io/docs/context-parsers/tomlfile/</link><pubDate>Thu, 09 Dec 2021 11:19:55 +0100</pubDate><guid>https://pypyr.io/docs/context-parsers/tomlfile/</guid><description>pypyr.parser.tomlfile permalink read toml file into context permalinkTake a path from the cli input argument, and read the toml file at that path into context. Strongly typed values in the source toml will translate into the pipeline context (in other words, integers will be integers, booleans will be booleans etc.). This lets you initialize the pipeline context from a toml file.
The input path can be relative or absolute. Relative paths are relative to the current working directory.</description></item><item><title>pypyr.steps.fileformattoml</title><link>https://pypyr.io/docs/steps/fileformattoml/</link><pubDate>Sat, 11 Jul 2020 17:23:36 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformattoml/</guid><description>pypyr.steps.fileformattoml permalink find &amp;amp; replace tokens in toml file permalinkParses input toml file and creates an output toml file while substituting {tokens} in the source toml from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over any structural curly braces in the source toml.
This step does not preserve comments or whitespace. Use fileformat or filereplace if you want to preserve comments/whitespace.</description></item></channel></rss>