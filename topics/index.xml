<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>topics on pypyr</title><link>https://pypyr.io/topics/</link><description>Recent content in topics on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pypyr.io/topics/index.xml" rel="self" type="application/rss+xml"/><item><title>toml</title><link>https://pypyr.io/topics/toml/</link><pubDate>Thu, 09 Dec 2021 21:24:28 +0100</pubDate><guid>https://pypyr.io/topics/toml/</guid><description/></item><item><title>collections</title><link>https://pypyr.io/topics/collections/</link><pubDate>Tue, 05 Oct 2021 15:10:17 +0100</pubDate><guid>https://pypyr.io/topics/collections/</guid><description/></item><item><title>control-of-flow</title><link>https://pypyr.io/topics/control-of-flow/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/topics/control-of-flow/</guid><description>control-of-flow permalinkYou can control the flow of pypyr pipeline execution between step-groups with the following handy steps:
pypyr.steps.call pypyr.steps.jump pypyr.steps.switch pypyr.steps.stopstepgroup pypyr.steps.stoppipeline pypyr.steps.stop You can call other pipelines from within a pipeline with:
pypyr.steps.pype On top of this, you can control which individual steps should run or not using the conditional step decorators:
run skip Looping happens on the step-level, using the following step decorators:
while foreach You can set a while or foreach loop on any given step, including on a call step or a pype step, which lets you call another step-group or an entire pipeline repeatedly in a loop.</description></item><item><title>pipeline format</title><link>https://pypyr.io/topics/pipeline-format/</link><pubDate>Fri, 07 Aug 2020 23:31:20 +0100</pubDate><guid>https://pypyr.io/topics/pipeline-format/</guid><description/></item><item><title>yaml</title><link>https://pypyr.io/topics/yaml/</link><pubDate>Fri, 07 Aug 2020 22:07:51 +0100</pubDate><guid>https://pypyr.io/topics/yaml/</guid><description/></item><item><title>time</title><link>https://pypyr.io/topics/time/</link><pubDate>Fri, 07 Aug 2020 21:47:35 +0100</pubDate><guid>https://pypyr.io/topics/time/</guid><description/></item><item><title>print</title><link>https://pypyr.io/topics/print/</link><pubDate>Fri, 07 Aug 2020 21:43:49 +0100</pubDate><guid>https://pypyr.io/topics/print/</guid><description/></item><item><title>paths</title><link>https://pypyr.io/topics/paths/</link><pubDate>Fri, 07 Aug 2020 21:40:41 +0100</pubDate><guid>https://pypyr.io/topics/paths/</guid><description/></item><item><title>loops</title><link>https://pypyr.io/topics/loops/</link><pubDate>Fri, 07 Aug 2020 11:58:52 +0100</pubDate><guid>https://pypyr.io/topics/loops/</guid><description/></item><item><title>json</title><link>https://pypyr.io/topics/json/</link><pubDate>Thu, 06 Aug 2020 21:24:28 +0100</pubDate><guid>https://pypyr.io/topics/json/</guid><description/></item><item><title>inline code</title><link>https://pypyr.io/topics/inline-code/</link><pubDate>Thu, 06 Aug 2020 21:19:16 +0100</pubDate><guid>https://pypyr.io/topics/inline-code/</guid><description/></item><item><title>filesystem</title><link>https://pypyr.io/topics/filesystem/</link><pubDate>Thu, 06 Aug 2020 21:07:28 +0100</pubDate><guid>https://pypyr.io/topics/filesystem/</guid><description>filesystem permalinkpypyr has many ready-made functions to read, write &amp;amp; format files on the filesystem.
You can convert between text, json, yaml &amp;amp; toml formats without you having to write code. This is especially handy when you&amp;rsquo;re generating configuration or template files on-the-fly that you want to inject into other tools that you are automating with pypyr.
cross-platform paths permalinkWindows users, you can specify paths with / or \ as directory separator.</description></item><item><title>execute external program</title><link>https://pypyr.io/topics/execute-external-program/</link><pubDate>Thu, 06 Aug 2020 20:58:04 +0100</pubDate><guid>https://pypyr.io/topics/execute-external-program/</guid><description/></item><item><title>error handling</title><link>https://pypyr.io/topics/error-handling/</link><pubDate>Thu, 06 Aug 2020 20:40:26 +0100</pubDate><guid>https://pypyr.io/topics/error-handling/</guid><description/></item><item><title>environment variables</title><link>https://pypyr.io/topics/environment-variables/</link><pubDate>Thu, 06 Aug 2020 20:24:00 +0100</pubDate><guid>https://pypyr.io/topics/environment-variables/</guid><description/></item><item><title>debug</title><link>https://pypyr.io/topics/debug/</link><pubDate>Wed, 05 Aug 2020 21:20:49 +0100</pubDate><guid>https://pypyr.io/topics/debug/</guid><description/></item><item><title>custom code</title><link>https://pypyr.io/topics/custom-code/</link><pubDate>Wed, 05 Aug 2020 21:13:06 +0100</pubDate><guid>https://pypyr.io/topics/custom-code/</guid><description/></item><item><title>context</title><link>https://pypyr.io/topics/context/</link><pubDate>Wed, 05 Aug 2020 20:51:45 +0100</pubDate><guid>https://pypyr.io/topics/context/</guid><description/></item><item><title>built-in summary tables</title><link>https://pypyr.io/topics/built-in-summary-tables/</link><pubDate>Wed, 05 Aug 2020 20:46:07 +0100</pubDate><guid>https://pypyr.io/topics/built-in-summary-tables/</guid><description/></item><item><title>args</title><link>https://pypyr.io/topics/args/</link><pubDate>Wed, 05 Aug 2020 20:39:49 +0100</pubDate><guid>https://pypyr.io/topics/args/</guid><description/></item></channel></rss>