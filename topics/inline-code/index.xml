<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>inline code on pypyr</title><link>https://pypyr.io/topics/inline-code/</link><description>Recent content in inline code on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Aug 2020 21:19:16 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/inline-code/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.steps.pyimport</title><link>https://pypyr.io/docs/steps/pyimport/</link><pubDate>Wed, 25 Nov 2020 18:20:22 +0000</pubDate><guid>https://pypyr.io/docs/steps/pyimport/</guid><description>pypyr.steps.pyimport permalink import references for py strings permalinkImport module &amp;amp; object references to the !py string namespace.
This allows you to use any importable Python code in your !py strings.
- name: pypyr.steps.pyimport comment: any subsequent !py strings can use these objects in: pyImport: | import itertools as itools import math import urllib.parse from pathlib import Path from fractions import Fraction as myfraction - name: pypyr.steps.set comment: use your pyimports anywhere you can use a formatting expression.</description></item><item><title>pypyr.steps.py</title><link>https://pypyr.io/docs/steps/py/</link><pubDate>Mon, 06 Jul 2020 13:17:22 +0100</pubDate><guid>https://pypyr.io/docs/steps/py/</guid><description>pypyr.steps.py permalink run inline python permalinkExecutes the context value py as a dynamically interpreted python code block.
This is useful for adding inline Python code right in your pipeline.
You can use all the usual Python built-ins like len, abs and so forth. You can import standard libraries or your own custom modules &amp;amp; objects using the standard Python import syntax (e.g import x as y, from x import y).</description></item><item><title>py string - dynamic python expressions</title><link>https://pypyr.io/docs/substitutions/py-strings/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/substitutions/py-strings/</guid><description>py strings permalink dynamic python expressions permalinkpy strings allow you to execute python expressions dynamically. This lets you use a python expression wherever you can use a string formatting expression.
A py string looks like this:
!py &amp;lt;&amp;lt;your python expression here&amp;gt;&amp;gt; Context keys exist as variables of the same name.
For example, if context['key'] is &amp;lsquo;abc&amp;rsquo;, the following will return True: !py len(key) == 3&amp;quot;
Notice that you can use the context keys directly as variables.</description></item></channel></rss>