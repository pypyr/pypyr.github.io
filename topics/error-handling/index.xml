<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>error handling on pypyr</title><link>https://pypyr.io/topics/error-handling/</link><description>Recent content in error handling on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Aug 2020 20:40:26 +0100</lastBuildDate><atom:link href="https://pypyr.io/topics/error-handling/index.xml" rel="self" type="application/rss+xml"/><item><title>error handling</title><link>https://pypyr.io/docs/getting-started/error-handling/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/error-handling/</guid><description>error handling permalink stop all processing on error permalinkpypyr runs pipelines. . . and a pipeline is a sequence of steps. By default subsequent steps in the sequence should not run if a previous step failed.
If your desired behavior is for pipeline processing to stop and subsequent steps NOT to run once an error occurs somewhere, you don&amp;rsquo;t have to do anything special, because this is what pypyr does by default.</description></item><item><title>retry decorator</title><link>https://pypyr.io/docs/decorators/retry/</link><pubDate>Mon, 13 Jul 2020 13:37:06 +0100</pubDate><guid>https://pypyr.io/docs/decorators/retry/</guid><description>retry permalink automatic retries permalinkRetries the step until it succeeds. If you do not set retry, pypyr will not retry the step automatically. When you do set retry, pypyr will retry whatever step it is without you having to do anything else.
The retry iteration counter is context['retryCounter']. You can use this as usual for any context value in a formatting string expression as {retryCounter}.
These are all the available configuration parameters for retry:</description></item><item><title>swallow decorator</title><link>https://pypyr.io/docs/decorators/swallow/</link><pubDate>Sat, 11 Jul 2020 22:04:10 +0100</pubDate><guid>https://pypyr.io/docs/decorators/swallow/</guid><description>swallow permalink ignore pipeline step error permalinkIf True, catch any errors raised by the step and continue to the next step. pypyr logs the error both the output and to runErrors in context, so you&amp;rsquo;ll know what happened, but processing continues. When you set swallow to True, pypyr will NOT go to the step-group&amp;rsquo;s failure handler.
You could think of this as on error resume next for your pipeline.</description></item><item><title>onError decorator</title><link>https://pypyr.io/docs/decorators/onerror/</link><pubDate>Sat, 11 Jul 2020 21:42:31 +0100</pubDate><guid>https://pypyr.io/docs/decorators/onerror/</guid><description>onError permalink add custom data to exception permalinkProvide custom error information if the step raises an exception. This lets you add extra information to the error itself.
If this step errors, write the contents of onError to runErrors[n].customError in context. Steps inside a failure handler then can use this information. Alternatively, subsequent steps can also use this information, assuming you&amp;rsquo;ve got a swallow somewhere in the call chain.
onError can be a simple string, or your your own dict, or any given object.</description></item></channel></rss>