<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>step decorators on pypyr</title><link>https://pypyr.io/docs/decorators/</link><description>Recent content in step decorators on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/decorators/index.xml" rel="self" type="application/rss+xml"/><item><title>while loop decorator</title><link>https://pypyr.io/docs/decorators/while/</link><pubDate>Tue, 14 Jul 2020 13:09:24 +0100</pubDate><guid>https://pypyr.io/docs/decorators/while/</guid><description>while permalink repeat step(s) in while loop permalinkRepeat step until stop is True, or until you reach a configurable maximum iterations. You have to specify at least one of either max or stop.
If you specify both max and stop, the loop exits when stop is True as long as it&amp;rsquo;s still under max iterations.
max will exit the loop even if stop is still False. If you want to error and stop processing when max exhausts set errorOnMax to True.</description></item><item><title>skip decorator</title><link>https://pypyr.io/docs/decorators/skip/</link><pubDate>Tue, 14 Jul 2020 11:38:26 +0100</pubDate><guid>https://pypyr.io/docs/decorators/skip/</guid><description>skip permalink selectively skip step permalinkSkip this step if True, run step if False. Evaluates after the run decorator. This means that if run is False, the step will never run, regardless of skip.
Default is False. This means by default pypyr will not skip a step.
If this looks like it&amp;rsquo;s merely the inverse of run, that&amp;rsquo;s because it is. Use whichever suits your pipeline better, or combine run and skip in the same pipeline to toggle at runtime which steps you want to execute.</description></item><item><title>run decorator</title><link>https://pypyr.io/docs/decorators/run/</link><pubDate>Tue, 14 Jul 2020 11:02:07 +0100</pubDate><guid>https://pypyr.io/docs/decorators/run/</guid><description>run permalink selectively run step permalinkRuns this step if True, skips step if False.
Default is True. The means by default pypyr will run a step unless you tell it otherwise.
You&amp;rsquo;ll almost always use run with substitutions, so you set the value at run-time from context.
set run with substitution expressions permalinkYou can use truthy expressions with run, skip and swallow. This means you can selectively run a step depending on if an object is not null and evaluates truthy.</description></item><item><title>retry decorator</title><link>https://pypyr.io/docs/decorators/retry/</link><pubDate>Mon, 13 Jul 2020 13:37:06 +0100</pubDate><guid>https://pypyr.io/docs/decorators/retry/</guid><description>retry permalink automatic retries permalinkRetries the step until it succeeds. If you do not set retry, pypyr will not retry the step automatically. When you do set retry, pypyr will retry whatever step it is without you having to do anything else.
The retry iteration counter is retryCounter. You can use this as usual for any context value in a formatting string expression as {retryCounter}.
These are all the available configuration parameters for retry:</description></item><item><title>swallow decorator</title><link>https://pypyr.io/docs/decorators/swallow/</link><pubDate>Sat, 11 Jul 2020 22:04:10 +0100</pubDate><guid>https://pypyr.io/docs/decorators/swallow/</guid><description>swallow permalink ignore pipeline step error permalinkIf True, catch any errors raised by the step and continue to the next step. pypyr logs the error both the output and to runErrors in context, so you&amp;rsquo;ll know what happened, but processing continues. When you set swallow to True, pypyr will NOT go to the step-group&amp;rsquo;s failure handler.
You could think of this as on error resume next for your pipeline.</description></item><item><title>onError decorator</title><link>https://pypyr.io/docs/decorators/onerror/</link><pubDate>Sat, 11 Jul 2020 21:42:31 +0100</pubDate><guid>https://pypyr.io/docs/decorators/onerror/</guid><description>onError permalink add custom data to exception permalinkProvide custom error information if the step raises an exception. This lets you add extra information to the error itself.
If this step errors, write the contents of onError to runErrors[n].customError in context. Steps inside a failure handler then can use this information. Alternatively, subsequent steps can also use this information, assuming you&amp;rsquo;ve got a swallow somewhere in the call chain.
onError can be a simple string, or your your own dict, or any given object.</description></item><item><title>description decorator</title><link>https://pypyr.io/docs/decorators/description/</link><pubDate>Sat, 11 Jul 2020 20:35:07 +0100</pubDate><guid>https://pypyr.io/docs/decorators/description/</guid><description>description permalink provide step status output permalinkdescription is text that prints to the output when the pipeline runs. This is useful to provide operators with visibility of pipeline progress, especially where steps themselves do not provide any output.
The description outputs at NOTIFY - 25 level. This means you will see it by default. If you want to suppress description output, run pypyr with --log higher than 25.
If you are looking to annotate your pipeline in a way that does not print to runtime output use comment instead.</description></item><item><title>comment decorator</title><link>https://pypyr.io/docs/decorators/comment/</link><pubDate>Sat, 11 Jul 2020 20:13:51 +0100</pubDate><guid>https://pypyr.io/docs/decorators/comment/</guid><description>comment permalink comment your pipeline code permalinkSimilar to code comments, comment is for pipeline authors to annotate a pipeline step for the usual reasons. Like remembering why on earth you did something in a certain way two weeks later.
comment does not output at run-time ever. If you&amp;rsquo;re looking to add descriptive text that prints to output for pipeline consumer visibility, use description instead.
- name: pypyr.steps.set comment: this comment is for pipeline authors.</description></item><item><title>in decorator</title><link>https://pypyr.io/docs/decorators/in/</link><pubDate>Sat, 11 Jul 2020 12:56:32 +0100</pubDate><guid>https://pypyr.io/docs/decorators/in/</guid><description>in permalink add input arguments to step context permalinkin sets the input arguments for a step. pypyr adds anything in in to the context so that the decorated step can use these key-value pairs.
in is a mapping, also known as a dict {}. You can use complex, nested structures. pypyr will honor the data types of the yaml values you set in your pipeline.
# arbitrarily complex nested input args, # with different data types, # just to make a point.</description></item><item><title>foreach loop decorator</title><link>https://pypyr.io/docs/decorators/foreach/</link><pubDate>Fri, 10 Jul 2020 19:07:51 +0100</pubDate><guid>https://pypyr.io/docs/decorators/foreach/</guid><description>foreach permalink repeat step for each item in list permalinkRun the step once for each item in the list.
The iterator is context['i']. If you want to use the iterator value in your step with a substitution expression, you&amp;rsquo;d use {i}.
foreach takes any iterable. In your pipeline yaml, you can specify this as a list [] in two ways:
foreach: [item 1, item 2, item 3] or
foreach: - item 1 - item 2 - item 3 loop static input list permalinkThe foreach input here is a standard list.</description></item></channel></rss>