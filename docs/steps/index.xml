<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>steps overview on pypyr</title><link>https://pypyr.io/docs/steps/</link><description>Recent content in steps overview on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/steps/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyr.steps.add</title><link>https://pypyr.io/docs/steps/add/</link><pubDate>Tue, 05 Oct 2021 16:53:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/add/</guid><description>pypyr.steps.add permalink add item to a set permalinkAdd item(s) to a set.
The difference between a set and a list is that a list allows duplicate elements, whereas every item in a set is unique. If you&amp;rsquo;re looking to work with a list, use append instead. Sets are unordered, lists are ordered.
- name:pypyr.steps.addcomment:add item to a setin:add:set:my_set# required. Name of set.addMe:item# required. Add this to the set.unpack:False# optional. defaults False.</description></item><item><title>pypyr.steps.append</title><link>https://pypyr.io/docs/steps/append/</link><pubDate>Tue, 05 Oct 2021 14:42:26 +0100</pubDate><guid>https://pypyr.io/docs/steps/append/</guid><description>pypyr.steps.append permalink append item to a list permalinkAppend item(s) to the end of a list.
The full input for the append step looks like this:
- name:pypyr.steps.appendcomment:append item to listin:append:list:my_list# required. Name of list.addMe:list item# required. Append this to the listunpack:False# optional. Defaults False. If True, enumerate addMe &amp;amp; append each item individually.Use the list argument to specify the name of the list. If the list does not exist, pypyr will create a list of that name for you and initialize it with the value of addMe.</description></item><item><title>pypyr.steps.pyimport</title><link>https://pypyr.io/docs/steps/pyimport/</link><pubDate>Wed, 25 Nov 2020 18:20:22 +0000</pubDate><guid>https://pypyr.io/docs/steps/pyimport/</guid><description>pypyr.steps.pyimport permalink import references for py strings permalinkImport module &amp;amp; object references to the !py string namespace.
This allows you to use any importable Python code in your !py strings.
- name:pypyr.steps.pyimportcomment:any subsequent !py strings can use these objectsin:pyImport:|import itertools as itools import math import urllib.parse from pathlib import Path from fractions import Fraction as myfraction - name:pypyr.steps.setcomment:use your pyimports anywhere you can use a formatting expression.here using it to eval a bool for the &amp;#34;run&amp;#34; condition.</description></item><item><title>pypyr.steps.jsonparse</title><link>https://pypyr.io/docs/steps/jsonparse/</link><pubDate>Mon, 26 Oct 2020 13:12:12 +0000</pubDate><guid>https://pypyr.io/docs/steps/jsonparse/</guid><description>pypyr.steps.jsonparse permalink parse json string into context object permalinkParse an input json string into the pypyr context as an object. This allows you to work with the deserialized objects from the json string like you would normally work with any data structures in the pypyr context - so you can use all the usual context handling functionality to set, edit &amp;amp; manipulate context keys and values.
This step requires the jsonParse key in the pypyr context:</description></item><item><title>pypyr.steps.set</title><link>https://pypyr.io/docs/steps/set/</link><pubDate>Mon, 05 Oct 2020 13:28:46 +0100</pubDate><guid>https://pypyr.io/docs/steps/set/</guid><description>pypyr.steps.set permalink set context values with formatting &amp;amp; dynamic expressions permalinkSet context keys with arbitrary values of different types. You can also use formatting expressions for assigning dynamic run-time values with substitutions.
This is roughly the equivalent of instantiating and assigning a variable in traditional programming.
Requires the set key in context. set is a dictionary of items to set in context. For example, here is how you can set arbitrary values with different types to arbitrary keys:</description></item><item><title>pypyr.steps.contextcopy</title><link>https://pypyr.io/docs/steps/contextcopy/</link><pubDate>Sat, 15 Aug 2020 20:28:42 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextcopy/</guid><description>pypyr.steps.contextcopy permalink copy values &amp;amp; structures from one part of context to another permalinkCopies context values from already existing context values.
This is handy if you need to prepare certain keys in context where a next step might need a specific key. If you already have the value in context, you can create a new key (or update existing key) with that value.
contextcopy and set overwrite existing keys. If you want to merge new values into an existing destination hierarchy, use contextmerge instead.</description></item><item><title>pypyr.steps.assert</title><link>https://pypyr.io/docs/steps/assert/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/steps/assert/</guid><description>pypyr.steps.assert permalink stop pipeline execution if condition false permalinkAssert that something is True or equal to something else. The step raises an exception of type AssertionError if the assertion fails.
You can express an assert in three different ways:
- name:pypyr.steps.assertcomment:evaluates `assert` as truthyin:assert:&amp;#39;{evaluateMe}&amp;#39;- name:pypyr.steps.assertcomment:evaluate `this` as truthyin:assert:this:&amp;#39;{evaluateMe}&amp;#39;- name:pypyr.steps.assertcomment:assert that two things are equalin:assert:this:&amp;#39;{complexThing1}&amp;#39;equals:&amp;#39;{complexThing2}&amp;#39;The first two mostly do the same thing, so use whichever pleases your eye more. The only difference is in how pypyr processes mappings for truthy.</description></item><item><title>pypyr.steps.call</title><link>https://pypyr.io/docs/steps/call/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/steps/call/</guid><description>pypyr.steps.call permalink call another step in pipeline permalinkCall (invoke) another step-group in the same pipeline. Once the called group(s) are complete, pypyr continues processing from the point where you initiated the call.
If you want to jump to a different step-group and ignore the rest of the step-group you&amp;rsquo;re in, use pypyr.steps.jump instead.
input permalinkcall expects a context item call. It can take one of two forms:
- name:pypyr.steps.callcomment:simple string means just call the step-group named &amp;#34;callme&amp;#34;in:call:callme- name:pypyr.</description></item><item><title>pypyr.steps.echo</title><link>https://pypyr.io/docs/steps/echo/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/steps/echo/</guid><description>pypyr.steps.echo permalink write dynamic values to console output stdout permalinkEcho (i.e print) the context value echoMe to the output.
For example, if you had a pipeline like this:
# ./mypipeline.yamlcontext_parser:pypyr.parser.keyvaluepairssteps:- name:pypyr.steps.echoYou can run:
$ pypyr mypipeline &amp;#34;echoMe=Ceci n&amp;#39;est pas une pipe&amp;#34; Alternatively, if you had a pipeline like this:
# ./look-ma-no-params.yamlsteps:- name:pypyr.steps.echocomment:Output echoMein:echoMe:Ceci n&amp;#39;est pas une pipeYou can run:
$ pypyr look-ma-no-params Supports string substitutions.
write complex objects to output permalinkecho will serialize complex objects like dict or list to stdout for you.</description></item><item><title>pypyr.steps.tar</title><link>https://pypyr.io/docs/steps/tar/</link><pubDate>Tue, 07 Jul 2020 17:42:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/tar/</guid><description>pypyr.steps.tar permalink archive &amp;amp; extract tar files with compression permalinkArchive and extract tars with or without compression.
- name:pypyr.steps.tarcomment:extract &amp;amp; archive tarin:tar:extract:- in:/path/my.tarout:/out/patharchive:- in:/dir/to/archiveout:/out/destination.tarformat:&amp;#39;&amp;#39;# optional. &amp;#39;&amp;#39; | gz | bz2 | xzEither extract or archive should exist, or both. But not neither.
Optionally, you can also specify the tar compression format with format. Available options for format:
'' - no compression gz - (gzip) bz2 - (bzip2) xz - (lzma) If you do not specify format, it defaults to xz (lzma).</description></item><item><title>pypyr.steps.stopstepgroup</title><link>https://pypyr.io/docs/steps/stopstepgroup/</link><pubDate>Tue, 07 Jul 2020 17:36:13 +0100</pubDate><guid>https://pypyr.io/docs/steps/stopstepgroup/</guid><description>pypyr.steps.stopstepgroup permalinkStop current step-group. Doesn&amp;rsquo;t run any success or failure handlers, it just stops the current step-group.
This is handy if you are using pypyr.steps.call or pypyr.steps.jump to run different step-groups, allowing you to stop just a child step-group but letting the calling parent step-group continue.
You can always use pypyr.steps.stopstepgroup as a simple step, because it doesn&amp;rsquo;t need any input context properties.
If you use a Stop step-group instruction inside a failure handler it will stop processing at that point AND not quit reporting failure.</description></item><item><title>pypyr.steps.stoppipeline</title><link>https://pypyr.io/docs/steps/stoppipeline/</link><pubDate>Tue, 07 Jul 2020 17:26:12 +0100</pubDate><guid>https://pypyr.io/docs/steps/stoppipeline/</guid><description>pypyr.steps.stoppipeline permalink stop current pipeline immediately permalinkStop current pipeline. Doesn&amp;rsquo;t run any success or failure handlers, it just stops the current pipeline.
This is handy if you are using pypyr.steps.pype to call child pipelines from a parent pipeline, allowing you to stop just a child pipeline but letting the parent pipeline continue.
You can always use pypyr.steps.stoppipeline as a simple step, because it doesn&amp;rsquo;t need any input context properties.</description></item><item><title>pypyr.steps.stop</title><link>https://pypyr.io/docs/steps/stop/</link><pubDate>Tue, 07 Jul 2020 17:19:20 +0100</pubDate><guid>https://pypyr.io/docs/steps/stop/</guid><description>pypyr.steps.stop permalink stop pypyr immediately permalinkStop all pypyr processing immediately. Doesn&amp;rsquo;t run any success or failure handlers, it just stops everything in its tracks, even when you&amp;rsquo;re nested in child pipelines or a step-group call-chain.
You can always use pypyr.steps.stop as a simple step, because it doesn&amp;rsquo;t need any input context properties.
If you use a Stop instruction inside a failure handler it will stop processing at that point AND not quit reporting failure.</description></item><item><title>pypyr.steps.shell</title><link>https://pypyr.io/docs/steps/shell/</link><pubDate>Tue, 07 Jul 2020 11:53:28 +0100</pubDate><guid>https://pypyr.io/docs/steps/shell/</guid><description>pypyr.steps.shell permalink run commands in default shell permalinkRuns the context value cmd in the default shell. On a sensible O/S, this is /bin/sh, or more recently zsh.
Do all the things you can&amp;rsquo;t do with cmd. cmd runs a program or executable, shell invokes the actual system shell. This means all your shell expressions are available, such as your favorite bashisms.
If you are just looking to run a command with arguments, you do not need to use shell, you can use cmd instead, which will incur less processing overhead.</description></item><item><title>pypyr.steps.safeshell</title><link>https://pypyr.io/docs/steps/safeshell/</link><pubDate>Tue, 07 Jul 2020 11:17:29 +0100</pubDate><guid>https://pypyr.io/docs/steps/safeshell/</guid><description> pypyr.steps.safeshell permalinkDeprecated alias for cmd.
Example pipeline yaml:
steps:- name:pypyr.steps.safeshellin:cmd:ls -a</description></item><item><title>pypyr.steps.nowutc</title><link>https://pypyr.io/docs/steps/nowutc/</link><pubDate>Tue, 07 Jul 2020 10:19:23 +0100</pubDate><guid>https://pypyr.io/docs/steps/nowutc/</guid><description>pypyr.steps.nowutc permalink get current utc timestamp permalinkWrites the current UTC date &amp;amp; time to context nowUtc.
If you want local or wall time, check out pypyr.steps.now instead.
If you run this step as a simple step (with no input nowUtcIn formatting), the default datetime format is ISO8601. For example: YYYY-MM-DDTHH:MM:SS.ffffff+00:00
You can use explicit format strings to control the datetime representation. For a full list of available formatting codes, check python date &amp;amp; time formatting</description></item><item><title>pypyr.steps.now</title><link>https://pypyr.io/docs/steps/now/</link><pubDate>Tue, 07 Jul 2020 10:14:55 +0100</pubDate><guid>https://pypyr.io/docs/steps/now/</guid><description>pypyr.steps.now permalink get current local timestamp permalinkWrites the current local date &amp;amp; time to context now. Local time is also known as wall time.
If you want UTC time, check out pypyr.steps.nowutc instead.
If you run this step as a simple step (with no input formatting specified in nowIn), the default datetime format is ISO8601. For example: YYYY-MM-DDTHH:MM:SS.ffffff+00:00.
You can use explicit format strings to control the datetime representation. For a full list of available formatting codes, check python date &amp;amp; time formatting</description></item><item><title>pypyr.steps.pypyrversion</title><link>https://pypyr.io/docs/steps/pypyrversion/</link><pubDate>Tue, 07 Jul 2020 10:10:38 +0100</pubDate><guid>https://pypyr.io/docs/steps/pypyrversion/</guid><description>pypyr.steps.pypyrversion permalink get current installed version permalinkOutput the same as:
pypyr --version This is an actual pipeline, though, so unlike --version, it&amp;rsquo;ll use the standard pypyr logging format.
Example pipeline yaml:
steps:- pypyr.steps.pypyrversionSince this step does not have any input context, you can always run it as a simple step by just specifying the step-name as a string.</description></item><item><title>pypyr.steps.pype</title><link>https://pypyr.io/docs/steps/pype/</link><pubDate>Mon, 06 Jul 2020 18:44:14 +0100</pubDate><guid>https://pypyr.io/docs/steps/pype/</guid><description>pypyr.steps.pype permalink call another pipeline from current pipeline permalinkRun another pipeline from this step. This allows pipelines to invoke other pipelines. Why pype? Because the pypyr can pipe that song again.
pype is handy if you want to split a larger, cumbersome pipeline into smaller units. This helps testing, in that you can test smaller units as separate pipelines without having to re-run the whole big all-encompassing parent pipeline each time.</description></item><item><title>pypyr.steps.py</title><link>https://pypyr.io/docs/steps/py/</link><pubDate>Mon, 06 Jul 2020 13:17:22 +0100</pubDate><guid>https://pypyr.io/docs/steps/py/</guid><description>pypyr.steps.py permalink run inline python permalinkExecutes the context value py as a dynamically interpreted python code block.
This is useful for adding inline Python code right in your pipeline.
You can use all the usual Python built-ins like len, abs and so forth. You can import standard libraries or your own custom modules &amp;amp; objects using the standard Python import syntax (e.g import x as y, from x import y).</description></item><item><title>pypyr.steps.pathcheck</title><link>https://pypyr.io/docs/steps/pathcheck/</link><pubDate>Mon, 06 Jul 2020 13:06:55 +0100</pubDate><guid>https://pypyr.io/docs/steps/pathcheck/</guid><description>pypyr.steps.pathcheck permalink check if paths exist permalinkCheck if a path exists on the filesystem. Supports globbing. A path can point to a file or a directory.
input permalinkThe pathCheck context key must exist.
- name:pypyr.steps.pathcheckin:pathCheck:./do/i/exist.arb# single literal path- name:pypyr.steps.pathcheckin:pathCheck:./**/*.py# single glob expressionIf you want to check for the existence of multiple paths, you can pass a list instead. You can freely mix literal paths and globs.
- name:pypyr.steps.pathcheckin:pathCheck:- ./file1# literal relative path- .</description></item><item><title>pypyr.steps.jump</title><link>https://pypyr.io/docs/steps/jump/</link><pubDate>Mon, 06 Jul 2020 12:43:39 +0100</pubDate><guid>https://pypyr.io/docs/steps/jump/</guid><description>pypyr.steps.jump permalink jump to another step in pipeline permalinkJump to another step-group. This effectively stops processing on the current step-group from which you are jumping.
If you want to return to the point of origin after the step-group you jumped to completes, use call instead.
input permalinkjump expects a context item jump. It can take one of two forms:
- name:pypyr.steps.jumpcomment:simple string means just call the step-group named &amp;#34;jumphere&amp;#34;in:jump:jumphere- name:pypyr.</description></item><item><title>pypyr.steps.glob</title><link>https://pypyr.io/docs/steps/glob/</link><pubDate>Mon, 06 Jul 2020 12:26:50 +0100</pubDate><guid>https://pypyr.io/docs/steps/glob/</guid><description>pypyr.steps.glob permalink get all matching existing paths from glob permalinkResolve a glob and get all the paths that exist on the filesystem for the input glob.
Any given path can point to a file or a directory.
The glob context key must exist in input context:
- name:pypyr.steps.globin:glob:./**/*.py# single globIf you want to resolve multiple globs simultaneously and combine the results, you can pass a list instead. You can freely mix literal paths and globs.</description></item><item><title>pypyr.steps.filewriteyaml</title><link>https://pypyr.io/docs/steps/filewriteyaml/</link><pubDate>Mon, 06 Jul 2020 12:07:43 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewriteyaml/</guid><description>pypyr.steps.filewriteyaml permalink create yaml file from any context object permalinkFormat &amp;amp; write a payload to a yaml file on disk. This is useful for generating yaml files from your pipeline such as when you want to create configuration files dynamically on the fly.
filewriteyaml works like this:
- name:pypyr.steps.filewriteyamlcomment:write context payload out to yamlin:fileWriteYaml:path:/path/to/output.yaml# destination filepayload:# (optional) payload to write to pathkey1:value1# output yaml will havekey2:value2# key1 and key2 as string.</description></item><item><title>pypyr.steps.filewritejson</title><link>https://pypyr.io/docs/steps/filewritejson/</link><pubDate>Mon, 06 Jul 2020 11:38:51 +0100</pubDate><guid>https://pypyr.io/docs/steps/filewritejson/</guid><description>pypyr.steps.filewritejson permalink create json file from any context object permalinkFormat &amp;amp; write a payload to a json file on disk. This is useful for generating json files from your pipeline such as when you want to create configuration files dynamically on the fly.
filewritejson works like this:
- name:pypyr.steps.filewritejsoncomment:write context payload out to jsonin:fileWriteJson:path:/path/to/output.json# destination filepayload:# (optional) payload to write to pathkey1:value1# output json will havekey2:value2# key1 and key2 as stringkey3:124# output intkey4:false# output boolThis will generate the following json to /path/to/output.</description></item><item><title>pypyr.steps.filereplace</title><link>https://pypyr.io/docs/steps/filereplace/</link><pubDate>Fri, 03 Jul 2020 18:00:13 +0100</pubDate><guid>https://pypyr.io/docs/steps/filereplace/</guid><description>pypyr.steps.filereplace permalink find &amp;amp; replace arbitrary strings in a file permalinkParses input text file and replaces any given search strings.
The other fileformat steps, by way of contradistinction, uses string formatting expressions inside {braces} to format values against the pypyr context.
This step, however, lets you find any arbitrary search string and replace it with any replacement string. This is especially handy if you are working with a file where curly braces aren&amp;rsquo;t helpful for a formatting expression - e.</description></item><item><title>pypyr.steps.fileformatyaml</title><link>https://pypyr.io/docs/steps/fileformatyaml/</link><pubDate>Thu, 02 Jul 2020 17:23:36 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformatyaml/</guid><description>pypyr.steps.fileformatyaml permalink find &amp;amp; replace tokens in yaml file permalinkParses input yaml file and substitutes {tokens} from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over the yaml&amp;rsquo;s structural braces.
If your yaml doesn&amp;rsquo;t use curly braces that aren&amp;rsquo;t meant for {token} substitutions, you can happily use pypyr.steps.fileformat instead - it&amp;rsquo;s more memory efficient.</description></item><item><title>pypyr.steps.fileformatjson</title><link>https://pypyr.io/docs/steps/fileformatjson/</link><pubDate>Thu, 02 Jul 2020 17:23:30 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformatjson/</guid><description>pypyr.steps.fileformatjson permalink find &amp;amp; replace tokens in json permalinkParses input json file and substitutes {tokens} from the pypyr context.
Pretty much does the same thing as pypyr.steps.fileformat, only it makes it easier to work with curly braces for substitutions without tripping over the json&amp;rsquo;s structural braces.
Given input json like this:
{ &amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: { &amp;#34;k2.1&amp;#34;: &amp;#34;v2.1&amp;#34;, &amp;#34;k2.2&amp;#34;: [ &amp;#34;2.2.1&amp;#34;, &amp;#34;START {replaceMeNested} END&amp;#34; ] }, &amp;#34;k3&amp;#34;: &amp;#34;{replaceMeString}&amp;#34;, &amp;#34;k4&amp;#34;: &amp;#34;{replaceMeInt}&amp;#34;, &amp;#34;k5&amp;#34;: &amp;#34;{replaceMeBool}&amp;#34;, &amp;#34;{replaceMeKey}&amp;#34;: &amp;#34;this will replace the key&amp;#34; } And a pipeline like this:</description></item><item><title>pypyr.steps.fileformat</title><link>https://pypyr.io/docs/steps/fileformat/</link><pubDate>Wed, 01 Jul 2020 20:17:37 +0100</pubDate><guid>https://pypyr.io/docs/steps/fileformat/</guid><description>pypyr.steps.fileformat permalink find &amp;amp; replace tokens in text files permalinkParses input text file, substitutes {tokens} in the text of the file from the pypyr context and writes the result to an output file.
- name:pypyr.steps.fileformatcomment:read a file from disk,do some substitutions,write back to disk.in:fileFormat:in:./in/arb.txt# requiredout:./out/arb.txt# optionalSo if you had a text file like this:
{k1} sit thee down and write In a book that all may {k2} And your pypyr context were:</description></item><item><title>pypyr.steps.fetchyaml</title><link>https://pypyr.io/docs/steps/fetchyaml/</link><pubDate>Wed, 01 Jul 2020 20:02:35 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchyaml/</guid><description>pypyr.steps.fetchyaml permalink load &amp;amp; parse yaml permalinkLoads a yaml file into the pypyr context.
This step requires the following key in the pypyr context:
- name:pypyr.steps.fetchyamldescription:fetch yaml from pathin:fetchYaml:path:./path.yaml# required. path to file on disk. can be relative.key:destinationKey# optional. write yaml to this context key.If you do not specify key, yaml writes directly to context root.
If you do not want to specify a key, you can also use the streamlined format:</description></item><item><title>pypyr.steps.fetchjson</title><link>https://pypyr.io/docs/steps/fetchjson/</link><pubDate>Wed, 01 Jul 2020 19:02:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/fetchjson/</guid><description>pypyr.steps.fetchjson permalink load &amp;amp; parse json permalinkLoads a json file into the pypyr context.
This step requires the following key in the pypyr context:
- name:pypyr.steps.fetchjsoncomment:fetch json from pathin:fetchJson:path:./path.json# required. path to file on disk. can be relative.key:destinationKey# optional. write json to this context key.If you do not specify key, json writes directly to context root.
If you do not want to specify a key, you can also use the streamlined format:</description></item><item><title>pypyr.steps.envget</title><link>https://pypyr.io/docs/steps/envget/</link><pubDate>Wed, 01 Jul 2020 17:19:44 +0100</pubDate><guid>https://pypyr.io/docs/steps/envget/</guid><description>pypyr.steps.envget permalink get environment variables into context permalinkGet environment variables, and assign an optional default value to context if the sought environment variables do not exist.
The difference between pypyr.steps.envget and pypyr.steps.env , is that pypyr.steps.envget won&amp;rsquo;t raise an error if the $ENV doesn&amp;rsquo;t exist.
The envget context key must exist.
All inputs support substitutions.
See a worked example for getting environment variables with defaults here.
get an environment variable with a default fallback permalink- name:pypyr.</description></item><item><title>pypyr.steps.env</title><link>https://pypyr.io/docs/steps/env/</link><pubDate>Wed, 01 Jul 2020 17:11:02 +0100</pubDate><guid>https://pypyr.io/docs/steps/env/</guid><description>pypyr.steps.env permalink use environment variables in your pipeline permalinkGet, set or unset environment variables.
The env context key must exist. env can contain a combination of get, set and unset keys. You must specify at least one of get, set and unset.
env:get:contextkey1:env1contextkey2:env2set:env1:value1env2:value2unset:- env1- env2This step will run whatever combination of Get, Set and Unset you specify. Regardless of combination, execution order is:
get set unset - name:pypyr.</description></item><item><title>pypyr.steps.default</title><link>https://pypyr.io/docs/steps/default/</link><pubDate>Wed, 01 Jul 2020 12:22:55 +0100</pubDate><guid>https://pypyr.io/docs/steps/default/</guid><description>pypyr.steps.default permalink initialize the context with default values permalinkSets values in context if they do not exist already. Does not overwrite existing values. Supports nested hierarchies.
This is especially useful for setting default values in context, for example when using optional arguments from the cli.
This step sets the contents of the context key defaults into context where keys in defaults do not exist in context already. The contents of the defaults key must be a dictionary.</description></item><item><title>pypyr.steps.debug</title><link>https://pypyr.io/docs/steps/debug/</link><pubDate>Wed, 01 Jul 2020 12:03:17 +0100</pubDate><guid>https://pypyr.io/docs/steps/debug/</guid><description>pypyr.steps.debug permalink debug the context permalinkPretty print the context to output.
Print the pypyr context to the pypyr output. This is likely to be the console. This may assist in debugging when trying to see what values are what.
debug prints to the INFO (20) log-level. This means you won&amp;rsquo;t see debug output unless you specify pypyr mypype --log 20 or lower value for log. If you have values you that always want to print to output, echo is the more natural step to use.</description></item><item><title>pypyr.steps.contextsetf</title><link>https://pypyr.io/docs/steps/contextsetf/</link><pubDate>Tue, 30 Jun 2020 20:28:46 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextsetf/</guid><description>pypyr.steps.contextsetf permalinkUse pypyr.steps.set instead - it does the same thing but the name is shorter so less typing, woo! Your keyboard will thank you in the long run.
Although contextsetf is not going anywhere, new updates &amp;amp; fixes will only go to set.</description></item><item><title>pypyr.steps.contextmerge</title><link>https://pypyr.io/docs/steps/contextmerge/</link><pubDate>Tue, 30 Jun 2020 19:51:26 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextmerge/</guid><description>pypyr.steps.contextmerge permalink merging context values permalinkMerges values into context, preserving the existing hierarchy while only updating the differing values as specified in the contextMerge input.
By comparison, contextcopy and set overwrite the destination hierarchy that is in context already.
This step merges the contents of the context key contextMerge into context. The contents of the contextMerge key must be a dictionary.
examples permalinkFor example, say input context is:
key1:value1key2:value2key3:k31:value31k32:value32contextMerge:key2:&amp;#39;aaa_{key1}_zzz&amp;#39;key3:k33:value33_{key1}key4:&amp;#39;bbb_{key2}_yyy&amp;#39;This will result in return context:</description></item><item><title>pypyr.steps.contextclearall</title><link>https://pypyr.io/docs/steps/contextclearall/</link><pubDate>Tue, 30 Jun 2020 19:04:00 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextclearall/</guid><description>pypyr.steps.contextclearall permalinkWipe the entire context. No input context arguments required.
You can always use contextclearall as a simple step, since it does not require any input context.
Sample pipeline yaml:
steps:- my.arb.step- pypyr.steps.contextclearall- another.arb.stepcontextclearall also wipes all the imports from any preceding pyimport steps.</description></item><item><title>pypyr.steps.contextclear</title><link>https://pypyr.io/docs/steps/contextclear/</link><pubDate>Tue, 30 Jun 2020 19:03:21 +0100</pubDate><guid>https://pypyr.io/docs/steps/contextclear/</guid><description>pypyr.steps.contextclear permalinkRemove the specified items from the context.
Will iterate contextClear and remove those keys from context.
steps:- name:pypyr.steps.contextcleardescription:delete these 2 context keysin:contextClear:- removeMe- removeMeTooFor example, say input context is:
key1:value1key2:value2key3:value3key4:value4contextClear:- key2- key4- contextClearThis will result in return context:
key1:value1key3:value3Notice how contextClear also cleared itself in this example.</description></item><item><title>pypyr.steps.cmd</title><link>https://pypyr.io/docs/steps/cmd/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/steps/cmd/</guid><description>pypyr.steps.cmd permalink execute arbitrary external commands, applications &amp;amp; scripts permalinkRun a program, run an external script, application or command. Execute the context value cmd as a sub-process.
In cmd, you cannot use things like exit, return, shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user&amp;rsquo;s home directory. Use pypyr.steps.shell for this instead. cmd runs a command, it does not invoke the shell.
set command input permalinkInput context can take one of two forms:</description></item></channel></rss>