<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws steps overview on pypyr</title><link>https://pypyr.io/docs/plugins/aws/steps/</link><description>Recent content in aws steps overview on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/plugins/aws/steps/index.xml" rel="self" type="application/rss+xml"/><item><title>pypyraws.steps.ecswaitprep</title><link>https://pypyr.io/docs/plugins/aws/steps/ecswaitprep/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/ecswaitprep/</guid><description>pypyraws.steps.ecswaitprep permalink wait for ecs state changes permalinkRun me after an ecs task run or stop to prepare an ecs waiter.
Prepares the awsWaitIn context key for pypyraws.steps.wait.
Available ecs waiters are:
ServicesInactive ServicesStable TasksRunning TasksStopped Full details here: http://boto3.readthedocs.io/en/latest/reference/services/ecs.html#waiters
Use this step after any of the following ecs client methods if you want to use one of the ecs waiters to wait for a specific state:</description></item><item><title>pypyraws.steps.s3fetchjson</title><link>https://pypyr.io/docs/plugins/aws/steps/s3fetchjson/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/s3fetchjson/</guid><description>pypyraws.steps.s3fetchjson permalinkFetch a json file from s3 and put the json values into context.
input permalinkRequired input context is:
s3Fetch:clientArgs:# optionalarg1Name:arg1ValuemethodArgs:# mandatoryBucket:&amp;#39;{bucket}&amp;#39;Key:arb.jsonkey:&amp;#39;destination pypyr context key&amp;#39;# optional clientArgs go to the aws s3 client constructor. These are optional. methodArgs go to the the s3 get_object call. The minimum required values are: Bucket Key key writes fetched json to this context key. If not specified, json writes directly to context root.</description></item><item><title>pypyraws.steps.s3fetchyaml</title><link>https://pypyr.io/docs/plugins/aws/steps/s3fetchyaml/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/s3fetchyaml/</guid><description>pypyraws.steps.s3fetchyaml permalinkFetch a yaml file from s3 and put the yaml structure into context.
input permalinkRequired input context is:
s3Fetch:clientArgs:# optionalarg1Name:arg1ValuemethodArgs:# mandatoryBucket:&amp;#39;{bucket}&amp;#39;Key:arb.yamlkey:&amp;#39;destination pypyr context key&amp;#39;# optional clientArgs go to the aws s3 client constructor. These are optional. methodArgs go to the the s3 get_object call. The minimum required values are: Bucket Key key writes fetched yaml to this context key. If not specified, yaml writes directly to context root.</description></item><item><title>pypyraws.steps.wait</title><link>https://pypyr.io/docs/plugins/aws/steps/wait/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/wait/</guid><description>pypyraws.steps.wait permalink wait for aws state changes permalinkWait for things in AWS to complete before continuing pipeline.
Run any low-level boto3 client wait() from get_waiter.
Waiters use a client&amp;rsquo;s service operations to poll the status of an AWS resource and suspend execution until the AWS resource reaches the state that the waiter is polling for or a failure occurs while polling.
http://boto3.readthedocs.io/en/latest/guide/clients.html#waiters
input permalinkThe input context requires:
awsWaitIn:serviceName: &amp;#39;service name&amp;#39; # Available services here:http://boto3.</description></item><item><title>pypyraws.steps.waitfor</title><link>https://pypyr.io/docs/plugins/aws/steps/waitfor/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/waitfor/</guid><description>pypyraws.steps.waitfor permalink custom waiter for aws state changes permalinkCustom waiter for any aws client operation. Where pypyraws.steps.wait uses the official AWS waiters from the low-level client api, this step allows you to execute any aws low-level client method and wait for a specified field in the response to become the value you want it to be.
AWS does not have waiters for all state changes. Use this to create your own waiter for any property state change.</description></item><item><title>pypyraws.steps.client</title><link>https://pypyr.io/docs/plugins/aws/steps/client/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/plugins/aws/steps/client/</guid><description>pypyraws.steps.client permalink use any low-level aws service client permalinkThis step provides an easy way of getting at the low-level AWS api from the pypyr pipeline runner. So in short, pretty much anything you can do with the AWS api you got it as the Big O might have said.
This step lets you specify the service name and the service method you want to execute dynamically. You can also control the service header arguments and the method arguments themselves.</description></item></channel></rss>