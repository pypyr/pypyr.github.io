<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>getting started on pypyr</title><link>https://pypyr.io/docs/getting-started/</link><description>Recent content in getting started on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>install pypyr</title><link>https://pypyr.io/docs/getting-started/installation/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/installation/</guid><description> install pypyr permalink pip permalink$ pip install pypyr upgrades permalinkUse the standard pip upgrade switch:
$ pip install --upgrade pypyr python version permalinkTested against Python &amp;gt;=3.6
docker permalinkStuck with an older version of python? Want to run pypyr in an environment that you don&amp;rsquo;t control, like a CI server somewhere?
You can use the official pypyr docker image as a drop-in replacement for the pypyr executable.
$ docker run pypyr/pypyr echo &amp;#34;Ceci n&amp;#39;est pas une pipe&amp;#34;</description></item><item><title>run your first pipeline</title><link>https://pypyr.io/docs/getting-started/run-your-first-pipeline/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/run-your-first-pipeline/</guid><description>run your first pipeline permalink run a built-in pipeline permalinkRun one of the built-in pipelines to get a feel for it:
$ pypyr echo &amp;#34;Ceci n&amp;#39;est pas une pipe&amp;#34; echo is the name of a built-in pypyr pipeline. The pipeline simply echoes the input string back to console output using the built-in echo step.
The actual pipeline looks like this:
# To execute this pipeline, shell something like:# pypyr echo text goes herecontext_parser:pypyr.</description></item><item><title>basic concepts</title><link>https://pypyr.io/docs/getting-started/basic-concepts/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/basic-concepts/</guid><description>basic concepts permalink pipeline permalinkA pipeline is a sequence of steps. A pypyr pipeline is a simple human-readable and human-authored yaml file that defines your sequence of steps. pypyr interprets and runs the pipeline for you.
# ./arb-example-pipeline.yaml# optionalcontext_parser:my.custom.parser# how you pass cli arguments to the pipeline.# mandatorysteps:# step-group- step1# run ./step1.py- step2# run ./step2.py# optional.on_success:# step-group- my.first.success.step# run ./my/first/success/step.py- my.second.success.step# run ./my/second/success/step.py# optional.on_failure:# step-group- my.failure.handler.step# run ./my/failure/handler/step.py- my.failure.handler.notifier# run .</description></item><item><title>variables</title><link>https://pypyr.io/docs/getting-started/variables/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/variables/</guid><description>how to use variables in a pypyr pipeline permalinkYou can use variables to parameterize your pypyr pipelines and pass values between steps. pypyr lets you pass values seamlessly between the pipeline yaml, the cli (or api) and the steps in the pipeline.
pypyr stores variables in the context. The context is a dictionary that stays in scope for the duration of the entire pipeline.
Variables can be simple types like string or int, and they can also contain complex nested structures like dictionaries or lists.</description></item><item><title>conditional logic</title><link>https://pypyr.io/docs/getting-started/conditional-logic/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/conditional-logic/</guid><description>conditional logic permalink selectively run or skip step permalinkYou can control the flow of execution in your pipeline by selectively running or skipping a step based upon whether a conditional statement evaluates to True.
You use the run or skip decorators on any step to set your condition whether to execute the step.
By default, unless you explicitly tell pypyr differently, every step will run.
# getting-started/basic-conditional.yamlsteps:- name:pypyr.steps.echoin:echoMe:begin- name:pypyr.steps.cmdrun:Falsein:cmd:echo this will not run- name:pypyr.</description></item><item><title>loops</title><link>https://pypyr.io/docs/getting-started/loops/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/loops/</guid><description>loops permalinkYou can loop (or iterate) over any given step in a pypyr pipeline.
This means you can repeatedly run or loop over your own custom commands without writing any code.
Looping happens on the step-level, using the following step decorators:
foreach while The difference is that foreach iterates over every element in an iterable (such as a list), whereas while keeps on looping until a stop condition evaluates True.</description></item><item><title>error handling</title><link>https://pypyr.io/docs/getting-started/error-handling/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/error-handling/</guid><description>error handling permalink stop all processing on error permalinkpypyr runs pipelines. . . and a pipeline is a sequence of steps. By default subsequent steps in the sequence should not run if a previous step failed.
If your desired behavior is for pipeline processing to stop and subsequent steps NOT to run once an error occurs somewhere, you don&amp;rsquo;t have to do anything special, because this is what pypyr does by default.</description></item></channel></rss>