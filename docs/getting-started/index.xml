<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>getting started on pypyr</title><link>https://pypyr.io/docs/getting-started/</link><description>Recent content in getting started on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>install pypyr</title><link>https://pypyr.io/docs/getting-started/installation/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/installation/</guid><description> install pypyr permalink pip permalink$ pip install pypyr upgrades permalinkUse the standard pip upgrade switch:
$ pip install --upgrade pypyr python version permalinkTested against Python &amp;gt;=3.6
docker permalinkStuck with an older version of python? Want to run pypyr in an environment that you don&amp;rsquo;t control, like a CI server somewhere?
You can use the official pypyr docker image as a drop-in replacement for the pypyr executable.
$ docker run pypyr/pypyr echo &amp;#34;Ceci n&amp;#39;est pas une pipe&amp;#34;</description></item><item><title>run your first pipeline</title><link>https://pypyr.io/docs/getting-started/run-your-first-pipeline/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/run-your-first-pipeline/</guid><description>run your first pipeline permalink run a built-in pipeline permalinkRun one of the built-in pipelines to get a feel for it:
$ pypyr echo &amp;#34;Ceci n&amp;#39;est pas une pipe&amp;#34; echo is the name of a built-in pypyr pipeline. The pipeline simply echoes the input string back to console output using the built-in echo step.
The actual pipeline looks like this:
# To execute this pipeline, shell something like:# pypyr echo text goes herecontext_parser:pypyr.</description></item><item><title>basic concepts</title><link>https://pypyr.io/docs/getting-started/basic-concepts/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/basic-concepts/</guid><description>basic concepts permalink pipeline permalinkA pipeline is a sequence of steps. A pypyr pipeline is a simple human-readable and human-authored yaml file that defines your sequence of steps. pypyr interprets and runs the pipeline for you.
# ./arb-example-pipeline.yaml# optionalcontext_parser:my.custom.parser# how you pass cli arguments to the pipeline.# mandatorysteps:# step-group- step1# run ./step1.py- step2# run ./step2.py# optional.on_success:# step-group- my.first.success.step# run ./my/first/success/step.py- my.second.success.step# run ./my/second/success/step.py# optional.on_failure:# step-group- my.failure.handler.step# run ./my/failure/handler/step.py- my.failure.handler.notifier# run .</description></item><item><title>error handling</title><link>https://pypyr.io/docs/getting-started/error-handling/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/getting-started/error-handling/</guid><description>error handling permalinkpypyr runs pipelines. . . and a pipeline is a sequence of steps. If your desired behavior is for pipeline processing to stop and subsequent steps NOT to run once an error occurs somewhere, you don&amp;rsquo;t have to do anything special, because this is pypyr&amp;rsquo;s default.
pypyr assumes that any error is a hard stop, unless you explicitly tell pypyr differently by setting the swallow step decorator to True.</description></item></channel></rss>