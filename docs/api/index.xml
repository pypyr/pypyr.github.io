<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>api on pypyr</title><link>https://pypyr.io/docs/api/</link><description>Recent content in api on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title>custom context parser</title><link>https://pypyr.io/docs/api/context-parser/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/context-parser/</guid><description>create a custom context parser permalink parse custom cli arguments permalinkA context_parser parses the pypyr cli input arguments. Simply put, this is all the positional arguments after the pipeline-name in the cli.
$ pypyr pipelinename this is the args input In this example, ['this', 'is', 'the', 'args', 'input'] will go to the pipeline&amp;rsquo;s context parser as input.
Generally, a context_parser is likely to take the input args list and create a dict with it somehow.</description></item><item><title>custom pype loader</title><link>https://pypyr.io/docs/api/pipeline-loader/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/pipeline-loader/</guid><description>create a custom pipeline loader permalink load pipeline not on the local filesystem permalinkA pype loader is responsible for loading a pipeline.
The default pype loader is pypyr.pypeloaders.fileloader.
This default loader loads pipelines from the local file-system, following the usual pypyr pipeline look-up sequence.
If you want to load pipelines from somewhere else, like maybe a shared pipeline library, or implement your own caching, or maybe if you want to load a pipeline from something like s3 or consul, you can roll your own pype loader.</description></item><item><title>run pipeline api</title><link>https://pypyr.io/docs/api/run-pipeline/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/run-pipeline/</guid><description>run a pipeline from the api permalink main entrypoint api permalinkThe main entrypoint for running your own pipeline is main in the pypyr.pipelinerunner module.
import pypyr.pipelinerunner pypyr.pipelinerunner.main(pipeline_name=&amp;#39;arb pipe&amp;#39;, pipeline_context_input=&amp;#39;arb context input&amp;#39;, working_dir=&amp;#39;arb/dir&amp;#39;, groups=[&amp;#39;group&amp;#39;], success_group=&amp;#39;success_group&amp;#39;, failure_group=&amp;#39;failure_group&amp;#39;) Call this once per pypyr pipeline. Call me if you want to run a pypyr pipeline from your own code. This function does some one-off 1st time initialization before running the actual pipeline.
If you&amp;rsquo;re invoking pypyr from your own application via the API, it&amp;rsquo;s your responsibility to set up and configure logging.</description></item><item><title>custom step</title><link>https://pypyr.io/docs/api/step/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/step/</guid><description>create a custom step permalinkIf you can&amp;rsquo;t find a ready-made step that quite scratches your particular itch, don&amp;rsquo;t hesitate to code your own step - it&amp;rsquo;s easy, and very much the philosophy of pypyr that if you can write a quick couple of lines of python rather than contort your pipeline with clumsy step sequences, then do so! I know some frameworks don&amp;rsquo;t really encourage you to stray outside the prescribed features, but not so pypyr - your custom steps are first-class citizens of the pypyrverse.</description></item></channel></rss>