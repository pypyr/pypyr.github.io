<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pipelines on pypyr</title><link>https://pypyr.io/docs/pipelines/</link><description>Recent content in pipelines on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pypyr.io/docs/pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>pipeline yaml structure</title><link>https://pypyr.io/docs/pipelines/pipeline-structure/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/pipeline-structure/</guid><description>pipeline yaml structure permalink pypyr pipeline format permalinkA pipeline is a .yaml file. pypyr uses YAML version 1.2.
Save pipelines wherever you please. To run a pipeline, execute pypyr pipelinename from the directory where you saved pipelinename.yaml
# This is an example showing the anatomy of a pypyr pipeline # A pipeline should be saved as {working dir}/mypipelinename.yaml. # Run the pipeline from {working dir} like this: pypyr mypipelinename # optional.</description></item><item><title>pipeline look-up order</title><link>https://pypyr.io/docs/pipelines/lookup-order/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/lookup-order/</guid><description>pipeline look-up order permalink absolute vs relative paths permalinkYou can pass absolute or relative paths to pypyr.
posix term $ pypyr pipeline-name # relative path: ./pipeline-name.yaml $ pypyr subdir/pipeline-name # relative path: ./subdir/pipeline-name.yaml $ pypyr /subdir/pipeline-name # absolute path: /subdir/pipeline-name.yaml $ pypyr ~/subdir/pipeline-name # absolute path: /Users/username/subdir/pipeline-name.yaml _ windows term $ pypyr pipeline-name # relative path: .\pipeline-name.yaml $ pypyr subdir/pipeline-name # relative path: .\subdir\pipeline-name.yaml $ pypyr c:/subdir/pipeline-name # absolute path: c:\subdir\pipeline-name.</description></item><item><title>composability</title><link>https://pypyr.io/docs/pipelines/composability/</link><pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/composability/</guid><description>composability permalinkYou can encapsulate your automation tasks as modular components that you can re-use and re-combine in different ways in other places.
Here are some common patterns for how to achieve modular &amp;amp; composable pipelines. You can mix and match ideas from each in the same pipeline or suite of pipelines depending on what works for you, you don&amp;rsquo;t exclusively have to stick to one way.
groups permalink have a single pipeline with multiple step-groups.</description></item><item><title>pipeline shortcuts</title><link>https://pypyr.io/docs/pipelines/shortcuts/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/shortcuts/</guid><description>shortcuts permalinkYou can create shortcuts to complex command inputs in pypyr config.
A shortcut allows you to save longer command sequences so you can use a friendly short alias to run a pipeline with complex input arguments.
As with all pypyr config, you can create your shortcut in any of the yaml config files or in pyproject.toml.
config.yaml shortcuts: sc1: pipeline_name: /mydir/my-pipeline args: akey: a value anotherkey: 123 sc2: pipeline_name: /mydir/another-pipeline args: boolinput: true mylist: - one - two pyproject.</description></item></channel></rss>