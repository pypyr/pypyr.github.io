<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>substitutions on pypyr</title><link>https://pypyr.io/docs/substitutions/</link><description>Recent content in substitutions on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://pypyr.io/docs/substitutions/index.xml" rel="self" type="application/rss+xml"/><item><title>format string interpolation</title><link>https://pypyr.io/docs/substitutions/format-string/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/substitutions/format-string/</guid><description>string interpolation permalink formatting expressions with replacement tokens permalinkYou can use substitution tokens, aka string interpolation, to format strings where specified for context items. This substitutes anything between {curly braces} with the context value for that key. This also works with nested values where you have dictionaries/lists inside dictionaries/lists.
For example, if your context looked like this:
key1:downkey2:valleyskey3:value3key4:Piping {key1} the {key2} wild# key4 == &amp;#39;Piping down the valleys wild&amp;#39; nested values permalinkYou can reference keys nested deeper in the context hierarchy, in cases where you have a dictionary that contains lists/dictionaries that might contain other lists/dictionaries and so forth.</description></item><item><title>jsonify</title><link>https://pypyr.io/docs/substitutions/jsonify/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/substitutions/jsonify/</guid><description>jsonify permalink convert object to json string permalinkUse jsonify to serialize a pypyr context object to a json string.
- name:pypyr.steps.contextsetfin:contextSetf:myJsonDict:!jsonifyk1:v1k2:123k3:Falsek4:- 1- 2- a:bc:dmyJsonList:!jsonify- zero- one- twomyJsonNull:!jsonify nullmyJsonNumber:!jsonify 99myJsonQuotedString:!jsonify &amp;#34;0123&amp;#34;myJsonBareString:!jsonify arbitrary string- name:pypyr.steps.echoin:echoMe:|myJsonDict: {myJsonDict} myJsonList: {myJsonList} myJsonNull: {myJsonNull} myJsonNumber: {myJsonNumber} myJsonQuotedString: {myJsonQuotedString} myJsonBareString: {myJsonBareString}This gives output:
myJsonDict: {&amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: 123, &amp;#34;k3&amp;#34;: false, &amp;#34;k4&amp;#34;: [1, 2, {&amp;#34;a&amp;#34;: &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;: &amp;#34;d&amp;#34;}]} myJsonList: [&amp;#34;zero&amp;#34;, &amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;] myJsonNull: null myJsonNumber: 99 myJsonQuotedString: &amp;#34;0123&amp;#34; myJsonBareString: &amp;#34;arbitrary string&amp;#34; You could think of this as converting yaml to json, however, in actuality under the hood pypyr will serialize any given object in context to json with jsonify so it&amp;rsquo;s not necessarily just yaml as the input.</description></item><item><title>py string - dynamic python expressions</title><link>https://pypyr.io/docs/substitutions/py-strings/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/substitutions/py-strings/</guid><description>py strings permalink dynamic python expressions permalinkpy strings allow you to execute python expressions dynamically. This lets you use a python expression wherever you can use a string formatting expression.
A py string looks like this:
!py &amp;lt;&amp;lt;your python expression here&amp;gt;&amp;gt; For example, if context['key'] is &amp;lsquo;abc&amp;rsquo;, the following will return True: !py len(key) == 3&amp;quot;
Notice that you can use the context keys directly as variables. Unlike string formatting expressions, you don&amp;rsquo;t surround the key name with {curlies}.</description></item><item><title>sic string - literal strings</title><link>https://pypyr.io/docs/substitutions/sic-strings/</link><pubDate>Sat, 13 Jun 2020 21:38:57 +0100</pubDate><guid>https://pypyr.io/docs/substitutions/sic-strings/</guid><description>sic strings permalink literal string values permalinkIf a string is NOT to have {substitutions} run on it, it&amp;rsquo;s sic erat scriptum, or sic for short. This is handy especially when you are dealing with json as a string, rather than an actual json object, so you don&amp;rsquo;t have to use escape sequences to double curly all the structural braces and it simplifies the need for escape sequences.
A sic string looks like this:</description></item></channel></rss>