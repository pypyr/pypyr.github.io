<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pipelines on pypyr</title><link>https://pypyr.io/categories/pipelines/</link><description>Recent content in pipelines on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Aug 2020 23:57:33 +0100</lastBuildDate><atom:link href="https://pypyr.io/categories/pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>run a pipeline with the pypyr cli</title><link>https://pypyr.io/docs/cli/run-a-pipeline/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/cli/run-a-pipeline/</guid><description>run a pipeline from the cli permalink pass arguments &amp;amp; command line switches to the cli permalinkpypyr runs the pipeline specified by the name that you pass to the cli.
To make your pipelines edit easier in your favorite yaml editor, use a .yaml extension, but to save on typing you don&amp;rsquo;t need to enter the .yaml bit at the command line.
You can use your usual directory separators if you&amp;rsquo;re running a pipeline in a sub-directory, like $ pypyr subdir/subsubdir/pipeline</description></item><item><title>built-in pipelines</title><link>https://pypyr.io/docs/pipelines/builtin-pipelines/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/builtin-pipelines/</guid><description>Built-in pipelines permalinkpypyr comes with with some basic pipelines out of the box. These don&amp;rsquo;t do much, nor can they: the whole idea is for you to write your own awesome pipelines because it so so easy!
pipeline description how to run donothing Does what it says. Nothing. pypyr donothing echo Echos context value echoMe to output. pypyr echo text goes here pypyrversion Prints the python cli version number.</description></item><item><title>custom pype loader</title><link>https://pypyr.io/docs/api/pipeline-loader/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/pipeline-loader/</guid><description>create a custom pipeline loader permalink load pipeline not on the local filesystem permalinkA pype loader is responsible for loading a pipeline.
The default pype loader is pypyr.pypeloaders.fileloader.
This default loader loads pipelines from the local file-system, following the usual pypyr pipeline look-up sequence.
If you want to load pipelines from somewhere else, like maybe a shared pipeline library, or implement your own caching, or maybe if you want to load a pipeline from something like s3 or consul, you can roll your own pype loader.</description></item><item><title>pipeline look-up order</title><link>https://pypyr.io/docs/pipelines/lookup-order/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/lookup-order/</guid><description>pipeline look-up order permalink the working directory permalinkpypyr first looks for pipelines, any custom steps &amp;amp; other code in the current working directory. This is the directory from which you invoke pypyr.
Simply put, by default, this is the directory you&amp;rsquo;re currently in when you invoke pypyr from the cli.
You can change the default working directory by passing the --dir flag to pypyr CLI. pypyr will use whatever path you specify in --dir as the working directory base path.</description></item></channel></rss>