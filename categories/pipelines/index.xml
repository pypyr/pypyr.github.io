<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pipelines on pypyr</title><link>https://pypyr.io/categories/pipelines/</link><description>Recent content in pipelines on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Sep 2023 22:48:43 -0700</lastBuildDate><atom:link href="https://pypyr.io/categories/pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>pipeline look-up order</title><link>https://pypyr.io/docs/pipelines/lookup-order/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/lookup-order/</guid><description>pipeline look-up order permalink absolute vs relative paths permalinkYou can pass absolute or relative paths to pypyr.
posix term $ pypyr pipeline-name # relative path: ./pipeline-name.yaml $ pypyr subdir/pipeline-name # relative path: ./subdir/pipeline-name.yaml $ pypyr /subdir/pipeline-name # absolute path: /subdir/pipeline-name.yaml $ pypyr ~/subdir/pipeline-name # absolute path: /Users/username/subdir/pipeline-name.yaml _ windows term $ pypyr pipeline-name # relative path: .\pipeline-name.yaml $ pypyr subdir/pipeline-name # relative path: .\subdir\pipeline-name.yaml $ pypyr c:/subdir/pipeline-name # absolute path: c:\subdir\pipeline-name.</description></item><item><title>composability</title><link>https://pypyr.io/docs/pipelines/composability/</link><pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/composability/</guid><description>composability permalinkYou can encapsulate your automation tasks as modular components that you can re-use and re-combine in different ways in other places.
Here are some common patterns for how to achieve modular &amp;amp; composable pipelines. You can mix and match ideas from each in the same pipeline or suite of pipelines depending on what works for you, you don&amp;rsquo;t exclusively have to stick to one way.
groups permalink have a single pipeline with multiple step-groups.</description></item><item><title>run a pipeline with the pypyr cli</title><link>https://pypyr.io/docs/cli/run-a-pipeline/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/cli/run-a-pipeline/</guid><description>run a pipeline from the cli permalink pass arguments &amp;amp; command line switches to the cli permalinkpypyr runs the pipeline specified by the name that you pass to the cli.
To make your pipelines edit easier in your favorite yaml editor, use a .yaml extension, but to save on typing you don&amp;rsquo;t need to enter the .yaml bit at the command line.
You can use your usual directory separators if you&amp;rsquo;re running a pipeline in a sub-directory, like $ pypyr subdir/subsubdir/pipeline</description></item><item><title>pipeline shortcuts</title><link>https://pypyr.io/docs/pipelines/shortcuts/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/shortcuts/</guid><description>shortcuts permalinkYou can create shortcuts to complex command inputs in pypyr config.
A shortcut allows you to save longer command sequences so you can use a friendly short alias to run a pipeline with complex input arguments.
As with all pypyr config, you can create your shortcut in any of the yaml config files or in pyproject.toml.
config.yaml shortcuts: sc1: pipeline_name: /mydir/my-pipeline args: akey: a value anotherkey: 123 sc2: pipeline_name: /mydir/another-pipeline args: boolinput: true mylist: - one - two pyproject.</description></item><item><title>venv-create built-in pipeline</title><link>https://pypyr.io/docs/pipelines/built-in/venv-create/</link><pubDate>Wed, 05 Oct 2022 14:16:54 +0100</pubDate><guid>https://pypyr.io/docs/pipelines/built-in/venv-create/</guid><description>venv-create permalinkCreate virtual environments from a yaml or toml config file and install extra dependencies. To speed things up, the pipeline creates multiple venvs concurrently in parallel.
This pipeline uses the pypyr.steps.venv step under the covers, so check the step&amp;rsquo;s documentation for further detail on the config inputs.
This pipeline creates Python stdlib virtual environments (venv) from declarative config without writing any script yourself. The underlying mechanism is pretty much the equivalent of $ python -m venv my-dir.</description></item><item><title>config-show built-in pipeline</title><link>https://pypyr.io/docs/pipelines/built-in/config-show/</link><pubDate>Wed, 05 Oct 2022 14:11:11 +0100</pubDate><guid>https://pypyr.io/docs/pipelines/built-in/config-show/</guid><description>config-show permalinkShow pypyr&amp;rsquo;s current configuration settings and sources. This is useful to troubleshoot your configuration settings.
Run me like this:
$ pypyr config-show See troubleshooting config for details.</description></item><item><title>echo built-in pipeline</title><link>https://pypyr.io/docs/pipelines/built-in/echo/</link><pubDate>Wed, 05 Oct 2022 14:07:42 +0100</pubDate><guid>https://pypyr.io/docs/pipelines/built-in/echo/</guid><description> echo permalinkEchoes input args to output.
Run me like this:
$ pypyr echo hello there! hello there!</description></item><item><title>pypyrversion built-in pipeline</title><link>https://pypyr.io/docs/pipelines/built-in/pypyrversion/</link><pubDate>Wed, 05 Oct 2022 14:07:29 +0100</pubDate><guid>https://pypyr.io/docs/pipelines/built-in/pypyrversion/</guid><description> pypyrversion permalinkPrint the pypyr &amp;amp; current Python version numbers to stdout.
Run me like this:
$ pypyr pypyrversion pypyr 5.6.0 python 3.10.6 The pipeline uses pypyr.steps.pypyrversion under the hood.
Running this pipeline does the same thing as the cli --version switch:
$ pypyr --version</description></item><item><title>magritte built-in pipeline</title><link>https://pypyr.io/docs/pipelines/built-in/magritte/</link><pubDate>Wed, 05 Oct 2022 14:05:19 +0100</pubDate><guid>https://pypyr.io/docs/pipelines/built-in/magritte/</guid><description>magritte permalinkVery serious ontological statement about pipes.
Run me like this:
$ pypyr magritte Deep Lore: I tend to use this as a quick smoke test to verify pypyr installed as expected. If this seemingly silly pipeline works, you know pypyr can run, find pipelines and that built-ins installed as expected.</description></item><item><title>built-in pipelines</title><link>https://pypyr.io/docs/pipelines/built-in/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/built-in/</guid><description>built-in pipelines permalinkpypyr comes with with some basic pipelines out of the box. Some of these don&amp;rsquo;t do much, nor can they: the whole idea is for you to write your own awesome pipelines because it so so easy!</description></item><item><title>custom pype loader</title><link>https://pypyr.io/docs/api/pipeline-loader/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/pipeline-loader/</guid><description>create a custom pipeline loader permalink load pipeline not on the local filesystem permalinkA pype loader is responsible for loading a pipeline.
The default pype loader is pypyr.loaders.file. You can change this default in config for default_loader.
This default loader loads pipelines from the local file-system, following the usual pypyr pipeline look-up sequence.
You can find all of pypyr&amp;rsquo;s built-in loaders here.
If you want to load pipelines from somewhere else, like maybe a shared pipeline library, or implement your own caching, or maybe if you want to load a pipeline from something like s3 or consul, you can roll your own pype loader.</description></item></channel></rss>