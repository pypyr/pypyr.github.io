<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pipelines on pypyr</title><link>https://pypyr.io/categories/pipelines/</link><description>Recent content in pipelines on pypyr</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Aug 2020 23:57:33 +0100</lastBuildDate><atom:link href="https://pypyr.io/categories/pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>pipeline look-up order</title><link>https://pypyr.io/docs/pipelines/lookup-order/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/lookup-order/</guid><description>pipeline look-up order permalink absolute vs relative paths permalinkYou can pass absolute or relative paths to pypyr.
posix term $ pypyr pipeline-name # relative path: ./pipeline-name.yaml $ pypyr subdir/pipeline-name # relative path: ./subdir/pipeline-name.yaml $ pypyr /subdir/pipeline-name # absolute path: /subdir/pipeline-name.yaml $ pypyr ~/subdir/pipeline-name # absolute path: /Users/username/subdir/pipeline-name.yaml _ windows term $ pypyr pipeline-name # relative path: .\pipeline-name.yaml $ pypyr subdir/pipeline-name # relative path: .\subdir\pipeline-name.yaml $ pypyr c:/subdir/pipeline-name # absolute path: c:\subdir\pipeline-name.</description></item><item><title>pipeline shortcuts</title><link>https://pypyr.io/docs/pipelines/shortcuts/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/shortcuts/</guid><description>shortcuts permalinkYou can create shortcuts to complex command inputs in pypyr config.
A shortcut allows you to save longer command sequences so you can use a friendly short alias to run a pipeline with complex input arguments.
As with all pypyr config, you can create your shortcut in any of the yaml config files or in pyproject.toml.
config.yaml shortcuts: sc1: pipeline_name: /mydir/my-pipeline args: akey: a value anotherkey: 123 sc2: pipeline_name: /mydir/another-pipeline args: boolinput: true mylist: - one - two pyproject.</description></item><item><title>run a pipeline with the pypyr cli</title><link>https://pypyr.io/docs/cli/run-a-pipeline/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/cli/run-a-pipeline/</guid><description>run a pipeline from the cli permalink pass arguments &amp;amp; command line switches to the cli permalinkpypyr runs the pipeline specified by the name that you pass to the cli.
To make your pipelines edit easier in your favorite yaml editor, use a .yaml extension, but to save on typing you don&amp;rsquo;t need to enter the .yaml bit at the command line.
You can use your usual directory separators if you&amp;rsquo;re running a pipeline in a sub-directory, like $ pypyr subdir/subsubdir/pipeline</description></item><item><title>built-in pipelines</title><link>https://pypyr.io/docs/pipelines/builtin-pipelines/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/pipelines/builtin-pipelines/</guid><description>Built-in pipelines permalinkpypyr comes with with some basic pipelines out of the box. These don&amp;rsquo;t do much, nor can they: the whole idea is for you to write your own awesome pipelines because it so so easy!
pipeline description how to run config-show Display current config settings &amp;amp; sources. pypyr config-show donothing Does what it says. Nothing. pypyr donothing echo Echos input args to output. pypyr echo text goes here pypyrversion Prints the python cli version number.</description></item><item><title>custom pype loader</title><link>https://pypyr.io/docs/api/pipeline-loader/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://pypyr.io/docs/api/pipeline-loader/</guid><description>create a custom pipeline loader permalink load pipeline not on the local filesystem permalinkA pype loader is responsible for loading a pipeline.
The default pype loader is pypyr.loaders.file. You can change this default in config for default_loader.
This default loader loads pipelines from the local file-system, following the usual pypyr pipeline look-up sequence.
If you want to load pipelines from somewhere else, like maybe a shared pipeline library, or implement your own caching, or maybe if you want to load a pipeline from something like s3 or consul, you can roll your own pype loader.</description></item></channel></rss>